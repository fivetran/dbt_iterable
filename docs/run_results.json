{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-07-25T18:11:00.402679Z", "invocation_id": "d7917e17-857a-4b9d-81f2-4ed9c08afa82", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.803234Z", "completed_at": "2024-07-25T18:10:54.810452Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.812106Z", "completed_at": "2024-07-25T18:10:54.812117Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0165252685546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`campaign_list_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.798498Z", "completed_at": "2024-07-25T18:10:54.810666Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.812320Z", "completed_at": "2024-07-25T18:10:54.812325Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017345905303955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`campaign_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.805085Z", "completed_at": "2024-07-25T18:10:54.810904Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.812572Z", "completed_at": "2024-07-25T18:10:54.812575Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01680302619934082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`channel`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.805898Z", "completed_at": "2024-07-25T18:10:54.811092Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.812755Z", "completed_at": "2024-07-25T18:10:54.812758Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016836881637573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`event`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.817211Z", "completed_at": "2024-07-25T18:10:54.823833Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.825324Z", "completed_at": "2024-07-25T18:10:54.825328Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010838985443115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`list`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.820239Z", "completed_at": "2024-07-25T18:10:54.824040Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.825720Z", "completed_at": "2024-07-25T18:10:54.825725Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010849952697753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`template_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.818894Z", "completed_at": "2024-07-25T18:10:54.824242Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.825917Z", "completed_at": "2024-07-25T18:10:54.825921Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011517763137817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`message_type`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.822008Z", "completed_at": "2024-07-25T18:10:54.824694Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:54.826526Z", "completed_at": "2024-07-25T18:10:54.826530Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011571884155273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`user_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.835716Z", "completed_at": "2024-07-25T18:10:55.179893Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:55.180382Z", "completed_at": "2024-07-25T18:10:55.180387Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.351485013961792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as string) as campaign_id,\n        cast(list_id as string) as list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.837525Z", "completed_at": "2024-07-25T18:10:55.218297Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:55.218804Z", "completed_at": "2024-07-25T18:10:55.218810Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3894989490509033, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    updated_by_user_id\n    \n as \n    \n    updated_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string) as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        message_medium,\n        cast(recurring_campaign_id as string) as recurring_campaign_id,\n        cast(created_by_user_id as string ) as created_by_user_id,\n        cast(updated_by_user_id as string ) as updated_by_user_id,\n        cast(template_id as string) as template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:55.220882Z", "completed_at": "2024-07-25T18:10:55.497911Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:55.498942Z", "completed_at": "2024-07-25T18:10:55.498948Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.27968502044677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    cast(null as string) as \n    \n    _fivetran_user_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(_fivetran_id as string ) as event_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id,\n        cast(_fivetran_user_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_user_id as string ) , email) as unique_user_key,\n        cast(campaign_id as string ) as campaign_id,\n        cast(content_id as string ) as content_id,\n        created_at,\n        cast( timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        cast(message_bus_id as string ) as message_bus_id,\n        cast(message_id as string ) as message_id,\n        cast(message_type_id as string ) as message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:55.182612Z", "completed_at": "2024-07-25T18:10:55.498281Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:55.499148Z", "completed_at": "2024-07-25T18:10:55.499153Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31839895248413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as string ) as channel_id,\n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:55.502928Z", "completed_at": "2024-07-25T18:10:55.799083Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:55.799494Z", "completed_at": "2024-07-25T18:10:55.799499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2988100051879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string ) as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        cast(client_template_id as string ) as client_template_id,\n        cast(creator_user_id as string ) as creator_user_id,\n        cast(message_type_id as string ) as message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:55.501640Z", "completed_at": "2024-07-25T18:10:55.833185Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:55.833621Z", "completed_at": "2024-07-25T18:10:55.833626Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3332691192626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list_tmp`\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        description as list_description,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:55.801039Z", "completed_at": "2024-07-25T18:10:56.062953Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.063883Z", "completed_at": "2024-07-25T18:10:56.063893Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.264240026473999, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    rate_limit_per_minute\n    \n as \n    \n    rate_limit_per_minute\n    \n, \n    \n    \n    subscription_policy\n    \n as \n    \n    subscription_policy\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string ) as message_type_id,\n        name as message_type_name,\n        cast(channel_id as string ) as channel_id,\n        created_at as message_type_created_at,\n        frequency_cap,\n        rate_limit_per_minute,\n        subscription_policy,\n        updated_at as message_type_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.065779Z", "completed_at": "2024-07-25T18:10:56.068337Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.068703Z", "completed_at": "2024-07-25T18:10:56.068708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003916025161743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_lists", "compiled": true, "compiled_code": "with \n\n\n\ncampaign_send_list_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history`\n\n), combine_list_histories as (\n\n\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        'send' as list_activity\n    from campaign_send_list_history\n\n), order_campaign_list_history as (\n\n    select\n      *,\n      row_number() over(partition by list_id, campaign_id order by updated_at desc) as latest_list_index\n    from combine_list_histories\n\n), latest_campaign_list_history as (\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        list_activity\n\n    from order_campaign_list_history \n    where latest_list_index = 1\n)\n\nselect *\nfrom latest_campaign_list_history", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__campaign_lists`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.069913Z", "completed_at": "2024-07-25T18:10:56.076470Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.076855Z", "completed_at": "2024-07-25T18:10:56.076859Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007723808288574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id.208f9bf9ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_list_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.078076Z", "completed_at": "2024-07-25T18:10:56.080274Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.080651Z", "completed_at": "2024-07-25T18:10:56.080655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0033359527587890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_campaign", "compiled": true, "compiled_code": "with campaign_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`\n\n), latest_campaign as (\n    select\n      *,\n      row_number() over(partition by campaign_id order by updated_at desc) as latest_campaign_index\n    from campaign_history\n)\n\nselect *\nfrom latest_campaign\nwhere latest_campaign_index = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.081878Z", "completed_at": "2024-07-25T18:10:56.088751Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.089171Z", "completed_at": "2024-07-25T18:10:56.089175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008079767227172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.81e1a1b9b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.090392Z", "completed_at": "2024-07-25T18:10:56.092599Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.092923Z", "completed_at": "2024-07-25T18:10:56.092926Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003271341323852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id.b7c36e4525", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__campaign_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.094064Z", "completed_at": "2024-07-25T18:10:56.096654Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.096995Z", "completed_at": "2024-07-25T18:10:56.096998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0036940574645996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__event_unique_event_id__created_at.468c9e26a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`\n    group by unique_event_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.098189Z", "completed_at": "2024-07-25T18:10:56.100363Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.100695Z", "completed_at": "2024-07-25T18:10:56.100699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00323486328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id.370cd4bc9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.101847Z", "completed_at": "2024-07-25T18:10:56.103816Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.104141Z", "completed_at": "2024-07-25T18:10:56.104144Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0030069351196289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id.182ceb9636", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.105486Z", "completed_at": "2024-07-25T18:10:56.108609Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.108972Z", "completed_at": "2024-07-25T18:10:56.108977Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004476785659790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id.fc1eec7fbc", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select channel_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`\n  where channel_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.110166Z", "completed_at": "2024-07-25T18:10:56.112490Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.112840Z", "completed_at": "2024-07-25T18:10:56.112843Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003406047821044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.e0b90faa8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.114308Z", "completed_at": "2024-07-25T18:10:56.116860Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.117247Z", "completed_at": "2024-07-25T18:10:56.117252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003841876983642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id.14b24a1dfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect template_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`\nwhere template_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.118462Z", "completed_at": "2024-07-25T18:10:56.130569Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.130989Z", "completed_at": "2024-07-25T18:10:56.130994Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01348114013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id.47029d839a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect list_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`\nwhere list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:55.834941Z", "completed_at": "2024-07-25T18:10:56.131176Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.132132Z", "completed_at": "2024-07-25T18:10:56.132136Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2982468605041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    cast(null as string) as \n    \n    iterable_user_id\n    \n , \n    \n    \n    phone_number_line_type\n    \n as phone_digits , \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        lower(email) as email,\n        updated_at,\n        cast(user_id as string ) as user_id,\n        first_name,\n        last_name,\n        cast(email_list_ids as string) as email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        cast(iterable_user_id as string ) as iterable_user_id,\n        _fivetran_synced,\n        coalesce(cast(_fivetran_id as string ) , email) as unique_user_key\n\n        \n\n\n    \n        \n            \n                , phone_digits\n            \n        \n    \n        \n            \n                , additional_properties\n            \n        \n    \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.133377Z", "completed_at": "2024-07-25T18:10:56.138032Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.138431Z", "completed_at": "2024-07-25T18:10:56.138435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006595134735107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id.1e73c3def7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select list_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`\n  where list_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.136089Z", "completed_at": "2024-07-25T18:10:56.138596Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.139504Z", "completed_at": "2024-07-25T18:10:56.139508Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004518747329711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__message_type_channel", "compiled": true, "compiled_code": "with message_type as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`\n\n), channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__channel`\n\n), final as (\n\n    select \n        channel.*,\n        message_type.message_type_name,\n        message_type.message_type_id\n    from channel\n    left join message_type on channel.channel_id = message_type.channel_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__message_type_channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.140661Z", "completed_at": "2024-07-25T18:10:56.145046Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.145428Z", "completed_at": "2024-07-25T18:10:56.145432Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006050825119018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id.75eaa6fa62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.143183Z", "completed_at": "2024-07-25T18:10:56.145958Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.146762Z", "completed_at": "2024-07-25T18:10:56.146765Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004602193832397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id.0f75f83a34", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select message_type_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__message_type`\n  where message_type_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.147481Z", "completed_at": "2024-07-25T18:10:56.150983Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.151403Z", "completed_at": "2024-07-25T18:10:56.151408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052602291107177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__recurring_campaigns", "compiled": true, "compiled_code": "with latest_campaign as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_campaign`\n\n), recurring_campaign_join as (\n    select\n        latest_campaign.campaign_id,\n        latest_campaign.campaign_name,\n        latest_campaign.updated_at,\n        latest_campaign.campaign_state,\n        latest_campaign.campaign_type,\n        latest_campaign.send_size,\n        latest_campaign.start_at,\n        latest_campaign.ended_at,\n        latest_campaign.created_at,\n        latest_campaign.created_by_user_id,\n        latest_campaign.template_id,\n        latest_campaign.recurring_campaign_id,\n\n        recurring_campaign.campaign_name as recurring_campaign_name,\n        recurring_campaign.campaign_state as recurring_campaign_state,\n        recurring_campaign.send_size as recurring_campaign_send_size,\n        recurring_campaign.start_at as recurring_campaign_start_at\n\n    from latest_campaign\n\n    left join latest_campaign as recurring_campaign\n        on latest_campaign.recurring_campaign_id = recurring_campaign.campaign_id\n\n), final as (\n\n    select\n        recurring_campaign_join.*,\n        case when latest_campaign.recurring_campaign_id is not null then true \n        else false end as is_campaign_recurring\n\n    from recurring_campaign_join\n    left join latest_campaign on recurring_campaign_join.campaign_id = latest_campaign.recurring_campaign_id\n        and recurring_campaign_join.template_id = latest_campaign.template_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__recurring_campaigns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.149502Z", "completed_at": "2024-07-25T18:10:56.152184Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.153049Z", "completed_at": "2024-07-25T18:10:56.153052Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007771015167236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_user", "compiled": true, "compiled_code": "with user_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`\n\n), latest_user as (\n    select\n      *,\n      row_number() over(partition by unique_user_key order by updated_at desc) as latest_user_index\n    from user_history\n)\n\nselect *\nfrom latest_user\nwhere latest_user_index = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_user`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.153242Z", "completed_at": "2024-07-25T18:10:56.157735Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.161295Z", "completed_at": "2024-07-25T18:10:56.161299Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0092620849609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__list_user_history", "compiled": true, "compiled_code": "-- this model will serve to extract only email-list changes\nwith user_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`\n\n), previous_email_list_ids as (\n\n    select\n        *,\n        lag(email_list_ids) over(partition by unique_user_key order by updated_at asc) as previous_ids -- partition by email instead of unique_user_key here since this model is only for email-list users\n\n    from user_history \n\n), only_new_email_list_ids as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        email,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (previous_email_list_ids.phone_digits) as phone_digits\n    \n        , (previous_email_list_ids.additional_properties) as additional_properties\n    \n\n\n\n\n    from previous_email_list_ids\n    where email_list_ids != coalesce(previous_ids, 'this is new') -- list ids are always stored in their arrays in numerical order\n\n), most_recent_list_ids as (\n\n    select \n        *,\n        row_number() over(partition by email order by updated_at desc) as latest_user_index\n    \n    from only_new_email_list_ids\n\n), final as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        latest_user_index = 1 as is_current        \n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (most_recent_list_ids.phone_digits) as phone_digits\n    \n        , (most_recent_list_ids.additional_properties) as additional_properties\n    \n\n\n\n\n    from most_recent_list_ids\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__list_user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.157941Z", "completed_at": "2024-07-25T18:10:56.162027Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.162916Z", "completed_at": "2024-07-25T18:10:56.162920Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008044958114624023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_unique_user_key__updated_at.3e120444d3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`\n    group by unique_user_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.163117Z", "completed_at": "2024-07-25T18:10:56.166277Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.168293Z", "completed_at": "2024-07-25T18:10:56.168297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006329059600830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_unique_user_key.2845af2127", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_history`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.166462Z", "completed_at": "2024-07-25T18:10:56.169067Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.169793Z", "completed_at": "2024-07-25T18:10:56.169797Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012096881866455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_template", "compiled": true, "compiled_code": "with template_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__template_history`\n\n), order_template as (\n    select\n      *,\n      row_number() over(partition by template_id order by updated_at desc) as latest_template_index\n    from template_history\n\n), latest_template as (\n\n    select *\n    from order_template\n    where latest_template_index = 1\n\n), message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__message_type_channel`\n\n), template_join as (\n\n    select \n        latest_template.*,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium\n\n    from latest_template \n    left join message_type_channel \n        on latest_template.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom template_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_template`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.169982Z", "completed_at": "2024-07-25T18:10:56.178939Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.183403Z", "completed_at": "2024-07-25T18:10:56.183408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014539957046508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__list_user_unnest", "compiled": true, "compiled_code": "\n\nwith user_history as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__list_user_history` as user_history\n\n    \n    \n    where user_history.updated_at >= coalesce((select min(updated_at) from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__list_user_unnest` where is_current), '2010-01-01')\n    \n\n\n), unnest_email_array as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        phone_number,\n        updated_at,\n        is_current,\n        email_list_ids,\n        case when email_list_ids != '[]' then\n             email_list_id  \n            else null \n            end as email_list_id\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (user_history.phone_digits) as phone_digits\n    \n        , (user_history.additional_properties) as additional_properties\n    \n\n\n\n\n    from user_history\n\n    \n    cross join \n        unnest(JSON_EXTRACT_STRING_ARRAY(\n            case when email_list_ids = '[]' then '[\"is_null\"]' \n            else email_list_ids end)) as email_list_id\n    ), adjust_nulls as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        case when email_list_ids = '[\"is_null\"]' then '[]' else email_list_ids end as email_list_ids,\n        cast(NULLIF(email_list_id, 'is_null') as INT64) as list_id\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (unnest_email_array.phone_digits) as phone_digits\n    \n        , (unnest_email_array.additional_properties) as additional_properties\n    \n\n\n\n\n    from unnest_email_array\n\n), final as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        email,\n        first_name,\n        last_name,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        email_list_ids,\n        list_id,\n        to_hex(md5(cast(coalesce(cast(unique_user_key as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(list_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_key,\n        cast( timestamp_trunc(\n        cast(updated_at as timestamp),\n        day\n    ) as date) as date_day\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (adjust_nulls.phone_digits) as phone_digits\n    \n        , (adjust_nulls.additional_properties) as additional_properties\n    \n\n\n\n\n    from adjust_nulls\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__list_user_unnest`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.179115Z", "completed_at": "2024-07-25T18:10:56.184532Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.187250Z", "completed_at": "2024-07-25T18:10:56.187254Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009361028671264648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__events", "compiled": true, "compiled_code": "\n\nwith events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__event`\n\n    \n    where created_at >= (select max(created_at) from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__events` )\n    \n\n), campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__recurring_campaigns`\n\n\n\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_user`\n\n), message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__message_type_channel`\n\n), template as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_template`\n\n), event_join as (\n\n    select \n        events.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.is_campaign_recurring,\n        campaign.recurring_campaign_name,\n        campaign.recurring_campaign_id,\n\n        users.user_id,\n        users.first_name || ' ' || users.last_name as user_full_name,\n\n        message_type_channel.message_type_name,\n        message_type_channel.message_medium,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type\n\n        \n\n        ,\n        campaign.template_id,\n        template.template_name,\n        template.creator_user_id as template_creator_user_id\n        \n    from events\n\n    \n\n    left join campaign\n        on events.campaign_id = campaign.campaign_id\n    left join users\n        on events.unique_user_key = users.unique_user_key -- unique_user_key = _fivetran_user_id if exists, otherwise email\n    left join message_type_channel\n        on events.message_type_id = message_type_channel.message_type_id\n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom event_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.185016Z", "completed_at": "2024-07-25T18:10:56.188399Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.189169Z", "completed_at": "2024-07-25T18:10:56.189173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005886077880859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__list_user_history", "compiled": true, "compiled_code": "with user_list_unnest as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__list_user_unnest`\n\n), lists as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__list`\n\n), final as (\n    select\n        user_list_unnest.unique_user_key,\n        user_list_unnest._fivetran_user_id,\n        user_list_unnest.user_id,\n        user_list_unnest.email as user_email,\n        user_list_unnest.first_name as user_first_name,\n        user_list_unnest.last_name as user_last_name,\n        user_list_unnest.signup_date as user_signup_date,\n        user_list_unnest.signup_source as user_signup_source,\n        user_list_unnest.updated_at as user_updated_at,\n        user_list_unnest.list_id,\n        user_list_unnest.is_current,\n        lists.list_name,\n        lists.list_type,\n        lists.created_at as list_created_at           \n        \n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (user_list_unnest.phone_digits) as phone_digits\n    \n        , (user_list_unnest.additional_properties) as additional_properties\n    \n\n\n\n\n    from user_list_unnest\n    left join lists\n        on lists.list_id = user_list_unnest.list_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__list_user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.191073Z", "completed_at": "2024-07-25T18:10:56.199756Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.200394Z", "completed_at": "2024-07-25T18:10:56.200399Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011363983154296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__user_campaign", "compiled": true, "compiled_code": "with events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__events`\n\n), pivot_out_events as (\n\n-- this will be at the user-campaign-experiment variation level\n-- if experiment_id is null, the user-campaign interactions happened outside of an experiment\n-- if campaign_id is null, the user interactions are organic\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        campaign_id,\n\n        \n\n        email as user_email,\n        user_full_name,\n        case when campaign_id is null then 'organic' else campaign_name end as campaign_name,\n        template_id,\n        template_name,\n\n        recurring_campaign_id,\n        recurring_campaign_name,\n\n        min(created_at) as first_event_at,\n        max(created_at) as last_event_at\n\n        -- count up the number of instances of each metric\n        -- `iterable__event_metrics` is set by default to all events brought in by fivetran+iterable\n        -- https://fivetran.com/docs/applications/iterable#schemanotes\n        \n        , sum(case when lower(event_name) = 'emailclick' then 1 else 0 end) \n            as total_emailclick \n        \n        , sum(case when lower(event_name) = 'emailunsubscribe' then 1 else 0 end) \n            as total_emailunsubscribe \n        \n        , sum(case when lower(event_name) = 'emailcomplaint' then 1 else 0 end) \n            as total_emailcomplaint \n        \n        , sum(case when lower(event_name) = 'customevent' then 1 else 0 end) \n            as total_customevent \n        \n        , sum(case when lower(event_name) = 'emailsubscribe' then 1 else 0 end) \n            as total_emailsubscribe \n        \n        , sum(case when lower(event_name) = 'emailopen' then 1 else 0 end) \n            as total_emailopen \n        \n        , sum(case when lower(event_name) = 'pushsend' then 1 else 0 end) \n            as total_pushsend \n        \n        , sum(case when lower(event_name) = 'smsbounce' then 1 else 0 end) \n            as total_smsbounce \n        \n        , sum(case when lower(event_name) = 'pushbounce' then 1 else 0 end) \n            as total_pushbounce \n        \n        , sum(case when lower(event_name) = 'inappsendskip' then 1 else 0 end) \n            as total_inappsendskip \n        \n        , sum(case when lower(event_name) = 'smssend' then 1 else 0 end) \n            as total_smssend \n        \n        , sum(case when lower(event_name) = 'inappsend' then 1 else 0 end) \n            as total_inappsend \n        \n        , sum(case when lower(event_name) = 'pushopen' then 1 else 0 end) \n            as total_pushopen \n        \n        , sum(case when lower(event_name) = 'emailsend' then 1 else 0 end) \n            as total_emailsend \n        \n        , sum(case when lower(event_name) = 'pushsendskip' then 1 else 0 end) \n            as total_pushsendskip \n        \n        , sum(case when lower(event_name) = 'inappopen' then 1 else 0 end) \n            as total_inappopen \n        \n        , sum(case when lower(event_name) = 'emailsendskip' then 1 else 0 end) \n            as total_emailsendskip \n        \n        , sum(case when lower(event_name) = 'emailbounce' then 1 else 0 end) \n            as total_emailbounce \n        \n        , sum(case when lower(event_name) = 'inappclick' then 1 else 0 end) \n            as total_inappclick \n        \n        , sum(case when lower(event_name) = 'pushuninstall' then 1 else 0 end) \n            as total_pushuninstall \n        \n\n    from events\n\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11\n    \n\n), add_surrogate_key as (\n\n    \n    \n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(unique_user_key as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(campaign_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_user_campaign_id\n\n    from pivot_out_events\n)\n\nselect *\nfrom add_surrogate_key", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.196812Z", "completed_at": "2024-07-25T18:10:56.201193Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.202091Z", "completed_at": "2024-07-25T18:10:56.202094Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008315086364746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__events_unique_event_id__created_on.cd499f24d5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_on\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__events`\n    group by unique_event_id, created_on\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.202280Z", "completed_at": "2024-07-25T18:10:56.205231Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.207936Z", "completed_at": "2024-07-25T18:10:56.207941Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006814241409301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__events_event_id.ed1d28a650", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__events`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.205453Z", "completed_at": "2024-07-25T18:10:56.208984Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.211959Z", "completed_at": "2024-07-25T18:10:56.211963Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007769107818603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_unique_user_key__list_id__user_updated_at.343b33d606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, list_id, user_updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__list_user_history`\n    group by unique_user_key, list_id, user_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.209472Z", "completed_at": "2024-07-25T18:10:56.503565Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.504910Z", "completed_at": "2024-07-25T18:10:56.504921Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2973928451538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_event_metrics", "compiled": true, "compiled_code": "with user_campaign as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_campaign`\n), campaign_user_event_metrics as (\n    \n    select\n        campaign_id,\n        template_id\n        \n        , count(distinct unique_user_key) as count_unique_users\n        \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n                            , sum(total_emailclick) as total_emailclick\n                            , count(distinct case when total_emailclick > 0 then user_email else null end) as unique_total_emailclick\n            \n        \n            \n                            , sum(total_emailunsubscribe) as total_emailunsubscribe\n                            , count(distinct case when total_emailunsubscribe > 0 then user_email else null end) as unique_total_emailunsubscribe\n            \n        \n            \n                            , sum(total_emailcomplaint) as total_emailcomplaint\n                            , count(distinct case when total_emailcomplaint > 0 then user_email else null end) as unique_total_emailcomplaint\n            \n        \n            \n                            , sum(total_customevent) as total_customevent\n                            , count(distinct case when total_customevent > 0 then user_email else null end) as unique_total_customevent\n            \n        \n            \n                            , sum(total_emailsubscribe) as total_emailsubscribe\n                            , count(distinct case when total_emailsubscribe > 0 then user_email else null end) as unique_total_emailsubscribe\n            \n        \n            \n                            , sum(total_emailopen) as total_emailopen\n                            , count(distinct case when total_emailopen > 0 then user_email else null end) as unique_total_emailopen\n            \n        \n            \n                            , sum(total_pushsend) as total_pushsend\n                            , count(distinct case when total_pushsend > 0 then user_email else null end) as unique_total_pushsend\n            \n        \n            \n                            , sum(total_smsbounce) as total_smsbounce\n                            , count(distinct case when total_smsbounce > 0 then user_email else null end) as unique_total_smsbounce\n            \n        \n            \n                            , sum(total_pushbounce) as total_pushbounce\n                            , count(distinct case when total_pushbounce > 0 then user_email else null end) as unique_total_pushbounce\n            \n        \n            \n                            , sum(total_inappsendskip) as total_inappsendskip\n                            , count(distinct case when total_inappsendskip > 0 then user_email else null end) as unique_total_inappsendskip\n            \n        \n            \n                            , sum(total_smssend) as total_smssend\n                            , count(distinct case when total_smssend > 0 then user_email else null end) as unique_total_smssend\n            \n        \n            \n                            , sum(total_inappsend) as total_inappsend\n                            , count(distinct case when total_inappsend > 0 then user_email else null end) as unique_total_inappsend\n            \n        \n            \n                            , sum(total_pushopen) as total_pushopen\n                            , count(distinct case when total_pushopen > 0 then user_email else null end) as unique_total_pushopen\n            \n        \n            \n                            , sum(total_emailsend) as total_emailsend\n                            , count(distinct case when total_emailsend > 0 then user_email else null end) as unique_total_emailsend\n            \n        \n            \n                            , sum(total_pushsendskip) as total_pushsendskip\n                            , count(distinct case when total_pushsendskip > 0 then user_email else null end) as unique_total_pushsendskip\n            \n        \n            \n                            , sum(total_inappopen) as total_inappopen\n                            , count(distinct case when total_inappopen > 0 then user_email else null end) as unique_total_inappopen\n            \n        \n            \n                            , sum(total_emailsendskip) as total_emailsendskip\n                            , count(distinct case when total_emailsendskip > 0 then user_email else null end) as unique_total_emailsendskip\n            \n        \n            \n                            , sum(total_emailbounce) as total_emailbounce\n                            , count(distinct case when total_emailbounce > 0 then user_email else null end) as unique_total_emailbounce\n            \n        \n            \n                            , sum(total_inappclick) as total_inappclick\n                            , count(distinct case when total_inappclick > 0 then user_email else null end) as unique_total_inappclick\n            \n        \n            \n                            , sum(total_pushuninstall) as total_pushuninstall\n                            , count(distinct case when total_pushuninstall > 0 then user_email else null end) as unique_total_pushuninstall\n            \n        \n            \n        \n        \n    from user_campaign\n    \n    \n    group by 1, 2\n    \n)\n\nselect *\nfrom campaign_user_event_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__campaign_event_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.509481Z", "completed_at": "2024-07-25T18:10:56.516046Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.517301Z", "completed_at": "2024-07-25T18:10:56.517308Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009871244430541992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.unique_iterable__user_campaign_unique_user_campaign_id.43f4201913", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_user_campaign_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_campaign`\n  where unique_user_campaign_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.213587Z", "completed_at": "2024-07-25T18:10:56.770707Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.771664Z", "completed_at": "2024-07-25T18:10:56.771674Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5599501132965088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__user_event_metrics", "compiled": true, "compiled_code": "with user_campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_campaign`\n\n), user_event_metrics as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        user_email, \n        count(distinct campaign_id) as count_total_campaigns,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n                            , sum(total_emailclick) as total_emailclick\n            \n        \n            \n                            , sum(total_emailunsubscribe) as total_emailunsubscribe\n            \n        \n            \n                            , sum(total_emailcomplaint) as total_emailcomplaint\n            \n        \n            \n                            , sum(total_customevent) as total_customevent\n            \n        \n            \n                            , sum(total_emailsubscribe) as total_emailsubscribe\n            \n        \n            \n                            , sum(total_emailopen) as total_emailopen\n            \n        \n            \n                            , sum(total_pushsend) as total_pushsend\n            \n        \n            \n                            , sum(total_smsbounce) as total_smsbounce\n            \n        \n            \n                            , sum(total_pushbounce) as total_pushbounce\n            \n        \n            \n                            , sum(total_inappsendskip) as total_inappsendskip\n            \n        \n            \n                            , sum(total_smssend) as total_smssend\n            \n        \n            \n                            , sum(total_inappsend) as total_inappsend\n            \n        \n            \n                            , sum(total_pushopen) as total_pushopen\n            \n        \n            \n                            , sum(total_emailsend) as total_emailsend\n            \n        \n            \n                            , sum(total_pushsendskip) as total_pushsendskip\n            \n        \n            \n                            , sum(total_inappopen) as total_inappopen\n            \n        \n            \n                            , sum(total_emailsendskip) as total_emailsendskip\n            \n        \n            \n                            , sum(total_emailbounce) as total_emailbounce\n            \n        \n            \n                            , sum(total_inappclick) as total_inappclick\n            \n        \n            \n                            , sum(total_pushuninstall) as total_pushuninstall\n            \n        \n            \n        \n\n    from user_campaign\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom user_event_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__user_event_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.520121Z", "completed_at": "2024-07-25T18:10:56.787142Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.791257Z", "completed_at": "2024-07-25T18:10:56.791262Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2726268768310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__campaigns", "compiled": true, "compiled_code": "with campaign_event_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__campaign_event_metrics`\n\n), campaign_list_metrics as (\n\n    select\n        campaign_id,\n        sum(case when list_activity = 'send' then 1 else 0 end) as count_send_lists,\n        sum(case when list_activity = 'suppress' then 1 else 0 end) as count_suppress_lists\n    \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__campaign_lists`\n    group by campaign_id\n\n), campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__recurring_campaigns`\n    \n\n\n), template as (\n    -- rebringing this in (it is brought in iterable__events) in case any campaigns don't have events yet\n    -- this will result in some DAG ugliness but maintains template info for non-sent campaigns\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__latest_template`\n\n), campaign_join as (\n\n     -- these are both in campaigns\n\n    -- this query will be at the campaign and experiment(if available) variation grain\n    select\n        campaign.*,\n        `count_unique_users`,\n  `total_emailclick`,\n  `unique_total_emailclick`,\n  `total_emailunsubscribe`,\n  `unique_total_emailunsubscribe`,\n  `total_emailcomplaint`,\n  `unique_total_emailcomplaint`,\n  `total_customevent`,\n  `unique_total_customevent`,\n  `total_emailsubscribe`,\n  `unique_total_emailsubscribe`,\n  `total_emailopen`,\n  `unique_total_emailopen`,\n  `total_pushsend`,\n  `unique_total_pushsend`,\n  `total_smsbounce`,\n  `unique_total_smsbounce`,\n  `total_pushbounce`,\n  `unique_total_pushbounce`,\n  `total_inappsendskip`,\n  `unique_total_inappsendskip`,\n  `total_smssend`,\n  `unique_total_smssend`,\n  `total_inappsend`,\n  `unique_total_inappsend`,\n  `total_pushopen`,\n  `unique_total_pushopen`,\n  `total_emailsend`,\n  `unique_total_emailsend`,\n  `total_pushsendskip`,\n  `unique_total_pushsendskip`,\n  `total_inappopen`,\n  `unique_total_inappopen`,\n  `total_emailsendskip`,\n  `unique_total_emailsendskip`,\n  `total_emailbounce`,\n  `unique_total_emailbounce`,\n  `total_inappclick`,\n  `unique_total_inappclick`,\n  `total_pushuninstall`,\n  `unique_total_pushuninstall`\n        , \n        campaign_list_metrics.count_send_lists,\n        campaign_list_metrics.count_suppress_lists,\n        \n        template.template_name,\n        template.creator_user_id as template_creator_user_id,\n        template.message_medium,\n        template.message_type_name,\n        template.channel_name,\n        template.channel_id,\n        template.channel_type\n\n    from campaign\n    left join campaign_event_metrics \n        on campaign.campaign_id = campaign_event_metrics.campaign_id\n        and campaign.template_id = campaign_event_metrics.template_id\n    left join campaign_list_metrics \n        on campaign.campaign_id = campaign_list_metrics.campaign_id\n\n    \n    \n    left join template\n        on campaign.template_id = template.template_id\n\n), add_surrogate_key as (\n\n    \n    \n\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(campaign_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(template_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_campaign_version_id\n\n    from campaign_join\n)\n\nselect *\nfrom add_surrogate_key", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__campaigns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.792828Z", "completed_at": "2024-07-25T18:10:56.795185Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.795523Z", "completed_at": "2024-07-25T18:10:56.795527Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0034508705139160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__campaigns_campaign_id.03c9448919", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__campaigns`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.796862Z", "completed_at": "2024-07-25T18:10:56.799285Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:56.799640Z", "completed_at": "2024-07-25T18:10:56.799644Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0036470890045166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.unique_iterable__campaigns_unique_campaign_version_id.fbdc122b05", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_campaign_version_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__campaigns`\n  where unique_campaign_version_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:56.782267Z", "completed_at": "2024-07-25T18:10:57.144447Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:57.146022Z", "completed_at": "2024-07-25T18:10:57.146047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.37149524688720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__users", "compiled": true, "compiled_code": "\n\nwith user_event_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__user_event_metrics`\n\n), user_unnested as (\n    -- this has all the user fields we're looking to pass through\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__list_user_unnest`\n\n    -- limit to current lists they are a member of. each list-user combo is a unique row, which we will roll up\n    where is_current\n\n), user_with_list_metrics as (\n\n    select\n        user_id,\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        email_list_ids\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (phone_digits) as phone_digits\n    \n        , (additional_properties) as additional_properties\n    \n\n\n\n\n        , count(distinct list_id) as count_lists\n\n    from user_unnested\n    -- roll up to the user\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13\n\n), user_join as (\n\n    select \n        user_with_list_metrics.*,\n        `count_total_campaigns`,\n  `first_event_at`,\n  `last_event_at`,\n  `total_emailclick`,\n  `total_emailunsubscribe`,\n  `total_emailcomplaint`,\n  `total_customevent`,\n  `total_emailsubscribe`,\n  `total_emailopen`,\n  `total_pushsend`,\n  `total_smsbounce`,\n  `total_pushbounce`,\n  `total_inappsendskip`,\n  `total_smssend`,\n  `total_inappsend`,\n  `total_pushopen`,\n  `total_emailsend`,\n  `total_pushsendskip`,\n  `total_inappopen`,\n  `total_emailsendskip`,\n  `total_emailbounce`,\n  `total_inappclick`,\n  `total_pushuninstall`\n\n    from user_with_list_metrics\n    left join user_event_metrics\n        on user_with_list_metrics.unique_user_key = user_event_metrics.unique_user_key\n)\n\nselect *\nfrom user_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__users`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:57.152498Z", "completed_at": "2024-07-25T18:10:57.161983Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:57.162817Z", "completed_at": "2024-07-25T18:10:57.162823Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013625144958496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__users_unique_user_key.4ca37a26c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__users`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:57.158327Z", "completed_at": "2024-07-25T18:10:57.162503Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:57.164017Z", "completed_at": "2024-07-25T18:10:57.164024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013911962509155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.unique_iterable__users_unique_user_key.a57f431f59", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_user_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__users`\n  where unique_user_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.830412Z", "completed_at": "2024-07-25T18:10:57.435495Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:57.436911Z", "completed_at": "2024-07-25T18:10:57.436926Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.6096858978271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_message_type_history`\n-- had to rename this to be compatible with postgres....", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:54.834317Z", "completed_at": "2024-07-25T18:10:57.698581Z"}, {"name": "execute", "started_at": "2024-07-25T18:10:57.699492Z", "completed_at": "2024-07-25T18:10:57.699502Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.8715670108795166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_channel_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:57.441568Z", "completed_at": "2024-07-25T18:11:00.258563Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.260255Z", "completed_at": "2024-07-25T18:11:00.260273Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.8217039108276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(message_type_id as string ) as message_type_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(message_type_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_message_type_unique_key,\n        \n        \n        rank() over(partition by email, message_type_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.268299Z", "completed_at": "2024-07-25T18:11:00.281066Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.282713Z", "completed_at": "2024-07-25T18:11:00.282722Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01908421516418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_message_type_id.268a89ea6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.275605Z", "completed_at": "2024-07-25T18:11:00.281569Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.283127Z", "completed_at": "2024-07-25T18:11:00.283133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01858830451965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsub_message_type_unsub_message_type_unique_key.2e13291de3", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_message_type_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`\n  where unsub_message_type_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:10:57.713446Z", "completed_at": "2024-07-25T18:11:00.362719Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.364793Z", "completed_at": "2024-07-25T18:11:00.364808Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.663680076599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel", "compiled": true, "compiled_code": "with base as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(channel_id as string ) as channel_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(channel_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_channel_unique_key,\n        \n        \n        rank() over(partition by email, channel_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.372532Z", "completed_at": "2024-07-25T18:11:00.385938Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.386985Z", "completed_at": "2024-07-25T18:11:00.386992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_channel_id.da0ed9e9be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.377284Z", "completed_at": "2024-07-25T18:11:00.386553Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.388510Z", "completed_at": "2024-07-25T18:11:00.388515Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01898336410522461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsubscribed_channel_unsub_channel_unique_key.48ad1606c9", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_channel_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`\n  where unsub_channel_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.380859Z", "completed_at": "2024-07-25T18:11:00.387617Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.389760Z", "completed_at": "2024-07-25T18:11:00.389765Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018780946731567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__user_unsubscriptions", "compiled": true, "compiled_code": "with message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`int_iterable__message_type_channel`\n\n), user_unsubscribed_channel as (\n\n    select\n        *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsubscribed_channel`\n    where latest_batch_index = 1\n\n\n), user_unsubscribed_message_type as (\n\n    select\n        *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`stg_iterable__user_unsub_message_type`\n    where latest_batch_index = 1\n\n\n\n), combine as (\n\n    select \n        _fivetran_user_id,\n        unique_user_key,\n        channel_id,\n        cast(null as string) as message_type_id,\n        updated_at\n    from user_unsubscribed_channel\n\n\n\n    union all\n\n    select \n        _fivetran_user_id,\n        unique_user_key,\n        cast(null as string) as channel_id,\n        message_type_id,\n        updated_at\n    from user_unsubscribed_message_type\n\n\n), final as (\n\n    select \n        combine._fivetran_user_id,\n        combine.unique_user_key,\n        -- coalescing since message_type -> channel goes up a grain\n        coalesce(combine.channel_id, message_type_channel.channel_id) as channel_id,\n        coalesce(combine.message_type_id, message_type_channel.message_type_id) as message_type_id,\n        combine.updated_at,\n        message_type_channel.channel_name,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium,\n        case when combine.channel_id is not null then true else false end as is_unsubscribed_channel_wide\n\n    from combine\n\n    -- unsubscribing from an entire channel unsubscribes a user from all message types in that channel\n    join message_type_channel \n        on combine.channel_id = message_type_channel.channel_id\n        or combine.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_unsubscriptions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.392699Z", "completed_at": "2024-07-25T18:11:00.398980Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.399709Z", "completed_at": "2024-07-25T18:11:00.399712Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00890803337097168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_unique_user_key__message_type_id__channel_id__is_unsubscribed_channel_wide.54aad019b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, message_type_id, channel_id, is_unsubscribed_channel_wide\n    from `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_unsubscriptions`\n    group by unique_user_key, message_type_id, channel_id, is_unsubscribed_channel_wide\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-25T18:11:00.396358Z", "completed_at": "2024-07-25T18:11:00.399464Z"}, {"name": "execute", "started_at": "2024-07-25T18:11:00.400659Z", "completed_at": "2024-07-25T18:11:00.400663Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009335041046142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__user_unsubscriptions_unique_user_key.f8db72932b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable_no_event_extension`.`iterable__user_unsubscriptions`\nwhere unique_user_key is null\n\n\n", "relation_name": null}], "elapsed_time": 6.5743348598480225, "args": {"exclude": [], "static_parser": true, "partial_parse_file_diff": true, "strict_mode": false, "version_check": true, "log_path": "/Users/renee/Documents/dbt/iterable/develop/logs", "write_json": true, "log_format_file": "debug", "defer": false, "log_format": "default", "indirect_selection": "eager", "quiet": false, "empty_catalog": false, "static": false, "enable_legacy_logger": false, "log_file_max_bytes": 10485760, "print": true, "warn_error_options": {"include": [], "exclude": []}, "partial_parse": true, "vars": {}, "populate_cache": true, "use_colors": true, "log_level": "info", "project_dir": "/Users/renee/Documents/dbt/iterable/develop", "favor_state": false, "compile": true, "profiles_dir": "/Users/renee/.dbt", "send_anonymous_usage_stats": true, "invocation_command": "dbt docs generate", "show_resource_report": false, "printer_width": 80, "which": "generate", "cache_selected_only": false, "log_level_file": "debug", "use_colors_file": true, "macro_debugging": false, "select": [], "introspect": true}}