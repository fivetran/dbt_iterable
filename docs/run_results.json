{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.14", "generated_at": "2024-05-21T08:34:34.541027Z", "invocation_id": "8a58423c-3dab-450b-beb1-13d9221ed3b0", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.014921Z", "completed_at": "2024-05-21T08:34:27.018400Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.020260Z", "completed_at": "2024-05-21T08:34:27.020269Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021696090698242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_suppression_list_history_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"campaign_suppression_list_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_suppression_list_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.012334Z", "completed_at": "2024-05-21T08:34:27.018770Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.020781Z", "completed_at": "2024-05-21T08:34:27.020786Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023125171661376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"campaign_list_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_list_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.009025Z", "completed_at": "2024-05-21T08:34:27.019052Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.021066Z", "completed_at": "2024-05-21T08:34:27.021069Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.024124860763549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_label_history_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"campaign_label_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_label_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.001639Z", "completed_at": "2024-05-21T08:34:27.019543Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.021981Z", "completed_at": "2024-05-21T08:34:27.021984Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025609970092773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_integration_tests_09\".\"campaign_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.027279Z", "completed_at": "2024-05-21T08:34:27.036959Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.038058Z", "completed_at": "2024-05-21T08:34:27.038063Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014345169067382812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"channel_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__channel_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.029861Z", "completed_at": "2024-05-21T08:34:27.037546Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.039638Z", "completed_at": "2024-05-21T08:34:27.039641Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01526784896850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_extension_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_integration_tests_09\".\"event_extension_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_extension_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.031929Z", "completed_at": "2024-05-21T08:34:27.037796Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.039865Z", "completed_at": "2024-05-21T08:34:27.039867Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015369892120361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_integration_tests_09\".\"event_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.033971Z", "completed_at": "2024-05-21T08:34:27.038296Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.040336Z", "completed_at": "2024-05-21T08:34:27.040339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015561103820800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"list_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__list_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.043953Z", "completed_at": "2024-05-21T08:34:27.051028Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.057343Z", "completed_at": "2024-05-21T08:34:27.057348Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01675701141357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"message_type_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__message_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.049133Z", "completed_at": "2024-05-21T08:34:27.057582Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.059724Z", "completed_at": "2024-05-21T08:34:27.059727Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01729893684387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"iterable_integration_tests_09\".\"user_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.047168Z", "completed_at": "2024-05-21T08:34:27.057869Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.059961Z", "completed_at": "2024-05-21T08:34:27.059963Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018069028854370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"template_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__template_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.051240Z", "completed_at": "2024-05-21T08:34:27.058564Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.060528Z", "completed_at": "2024-05-21T08:34:27.060531Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015938758850097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"user_unsubscribed_message_type_history_data\"\n-- had to rename this to be compatible with postgres....", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsub_message_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.062849Z", "completed_at": "2024-05-21T08:34:27.068665Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.073022Z", "completed_at": "2024-05-21T08:34:27.073026Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013888120651245117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_tmp", "compiled": true, "compiled_code": "select *\nfrom \"postgres\".\"iterable_integration_tests_09\".\"user_unsubscribed_channel_history_data\"", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsubscribed_channel_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.068893Z", "completed_at": "2024-05-21T08:34:27.069861Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.073252Z", "completed_at": "2024-05-21T08:34:27.073255Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00745701789855957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.campaign_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.070121Z", "completed_at": "2024-05-21T08:34:27.070939Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.073481Z", "completed_at": "2024-05-21T08:34:27.073483Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0075337886810302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.campaign_label_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.071171Z", "completed_at": "2024-05-21T08:34:27.071982Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.073697Z", "completed_at": "2024-05-21T08:34:27.073700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007598876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.campaign_list_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.078570Z", "completed_at": "2024-05-21T08:34:27.079514Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.084311Z", "completed_at": "2024-05-21T08:34:27.084315Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008785009384155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.campaign_metrics_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.079749Z", "completed_at": "2024-05-21T08:34:27.080583Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.084544Z", "completed_at": "2024-05-21T08:34:27.084547Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008873939514160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.campaign_suppression_list_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.080827Z", "completed_at": "2024-05-21T08:34:27.082293Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.084774Z", "completed_at": "2024-05-21T08:34:27.084777Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008954048156738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.channel_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.082554Z", "completed_at": "2024-05-21T08:34:27.083349Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.084999Z", "completed_at": "2024-05-21T08:34:27.085001Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009037017822265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.event_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.089590Z", "completed_at": "2024-05-21T08:34:27.090513Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.094524Z", "completed_at": "2024-05-21T08:34:27.094527Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007819652557373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.event_extension_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.090738Z", "completed_at": "2024-05-21T08:34:27.091552Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.094737Z", "completed_at": "2024-05-21T08:34:27.094740Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007908105850219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.list_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.091783Z", "completed_at": "2024-05-21T08:34:27.092577Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.094945Z", "completed_at": "2024-05-21T08:34:27.094947Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008010149002075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.message_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.092795Z", "completed_at": "2024-05-21T08:34:27.093582Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.095146Z", "completed_at": "2024-05-21T08:34:27.095149Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008116006851196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.template_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.099901Z", "completed_at": "2024-05-21T08:34:27.101367Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.105428Z", "completed_at": "2024-05-21T08:34:27.105432Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008584976196289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.user_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.101615Z", "completed_at": "2024-05-21T08:34:27.102424Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.105638Z", "completed_at": "2024-05-21T08:34:27.105641Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008741140365600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.user_unsubscribed_channel_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.102653Z", "completed_at": "2024-05-21T08:34:27.103444Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.105850Z", "completed_at": "2024-05-21T08:34:27.105852Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008840799331665039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.user_unsubscribed_channel_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.103672Z", "completed_at": "2024-05-21T08:34:27.104455Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.106063Z", "completed_at": "2024-05-21T08:34:27.106065Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008932113647460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.user_unsubscribed_message_type_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.110795Z", "completed_at": "2024-05-21T08:34:27.111724Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:27.125270Z", "completed_at": "2024-05-21T08:34:27.125274Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017373323440551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.iterable_integration_tests.user_unsubscribed_message_type_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.111968Z", "completed_at": "2024-05-21T08:34:28.237303Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:28.238156Z", "completed_at": "2024-05-21T08:34:28.238172Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2387950420379639, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_suppression_list_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_suppression_list_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    suppressed_list_id\n    \n as \n    \n    suppressed_list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as TEXT) as campaign_id,\n        cast(suppressed_list_id as TEXT) as suppressed_list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_suppression_list_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.121233Z", "completed_at": "2024-05-21T08:34:28.244779Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:28.245455Z", "completed_at": "2024-05-21T08:34:28.245461Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2482929229736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_label_history", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_label_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(campaign_id as TEXT) as campaign_id,\n        label,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_label_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.117969Z", "completed_at": "2024-05-21T08:34:28.270796Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:28.271964Z", "completed_at": "2024-05-21T08:34:28.271970Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2837612628936768, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_list_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as TEXT) as campaign_id,\n        cast(list_id as TEXT) as list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_list_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:27.127545Z", "completed_at": "2024-05-21T08:34:28.271105Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:28.272262Z", "completed_at": "2024-05-21T08:34:28.272265Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2773668766021729, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    updated_by_user_id\n    \n as \n    \n    updated_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as TEXT) as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        message_medium,\n        cast(recurring_campaign_id as TEXT) as recurring_campaign_id,\n        cast(created_by_user_id as TEXT ) as created_by_user_id,\n        cast(updated_by_user_id as TEXT ) as updated_by_user_id,\n        cast(template_id as TEXT) as template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:28.350269Z", "completed_at": "2024-05-21T08:34:29.421823Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:29.422447Z", "completed_at": "2024-05-21T08:34:29.422454Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1933708190917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__channel_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as TEXT ) as channel_id,\n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__channel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:28.359623Z", "completed_at": "2024-05-21T08:34:29.422712Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:29.423550Z", "completed_at": "2024-05-21T08:34:29.423553Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1841907501220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_extension", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_extension_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_already_running\n    \n as \n    \n    app_already_running\n    \n, \n    \n    \n    badge\n    \n as \n    \n    badge\n    \n, \n    \n    \n    catalog_collection_count\n    \n as \n    \n    catalog_collection_count\n    \n, \n    \n    \n    catalog_lookup_count\n    \n as \n    \n    catalog_lookup_count\n    \n, \n    \n    \n    canonical_url_id\n    \n as \n    \n    canonical_url_id\n    \n, \n    \n    \n    content_available\n    \n as \n    \n    content_available\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    email_id\n    \n as \n    \n    email_id\n    \n, \n    \n    \n    email_subject\n    \n as \n    \n    email_subject\n    \n, \n    \n    \n    experiment_id\n    \n as \n    \n    experiment_id\n    \n, \n    \n    \n    from_phone_number_id\n    \n as \n    \n    from_phone_number_id\n    \n, \n    \n    \n    from_smssender_id\n    \n as \n    \n    from_smssender_id\n    \n, \n    \n    \n    link_id\n    \n as \n    \n    link_id\n    \n, \n    \n    \n    link_url\n    \n as \n    \n    link_url\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    payload\n    \n as \n    \n    payload\n    \n, \n    \n    \n    platform_endpoint\n    \n as \n    \n    platform_endpoint\n    \n, \n    \n    \n    push_message\n    \n as \n    \n    push_message\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    sms_message\n    \n as \n    \n    sms_message\n    \n, \n    \n    \n    to_phone_number\n    \n as \n    \n    to_phone_number\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    workflow_name\n    \n as \n    \n    workflow_name\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    clicked_url\n    \n as \n    \n    clicked_url\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    expires_at\n    \n as \n    \n    expires_at\n    \n, \n    \n    \n    from_phone_number\n    \n as \n    \n    from_phone_number\n    \n, \n    \n    \n    in_app_body\n    \n as \n    \n    in_app_body\n    \n, \n    \n    \n    is_sms_estimation\n    \n as \n    \n    is_sms_estimation\n    \n, \n    \n    \n    labels\n    \n as \n    \n    labels\n    \n, \n    \n    \n    message_status\n    \n as \n    \n    message_status\n    \n, \n    \n    \n    mms_send_count\n    \n as \n    \n    mms_send_count\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    sms_send_count\n    \n as \n    \n    sms_send_count\n    \n, \n    \n    \n    _fivetran_user_id\n    \n as \n    \n    _fivetran_user_id\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    select\n        cast(_fivetran_id as TEXT ) as event_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_id,\n        app_already_running as is_app_already_running,\n        badge,\n        catalog_collection_count,\n        catalog_lookup_count,\n        cast(canonical_url_id as TEXT ) as canonical_url_id,\n        content_available as is_content_available,\n        cast(content_id as TEXT ) as content_id,\n        device,\n        cast(email_id as TEXT) as email_id,\n        email_subject,\n        experiment_id,\n        from_phone_number_id,\n        from_smssender_id,\n        cast(link_id as TEXT ) as link_id,\n        link_url,\n        locale,\n        payload,\n        platform_endpoint,\n        push_message,\n        region,\n        sms_message,\n        to_phone_number,\n        url,\n        cast(workflow_id as TEXT ) as workflow_id,\n        workflow_name,\n        city,\n        clicked_url,\n        country,\n        error_code,\n        expires_at,\n        from_phone_number,\n        in_app_body,\n        is_sms_estimation,\n        labels,\n        message_status,\n        mms_send_count,\n        reason,\n        sms_send_count,\n        _fivetran_synced,\n        cast(_fivetran_user_id as TEXT ) as _fivetran_user_id\n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_extension\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:28.407242Z", "completed_at": "2024-05-21T08:34:29.447231Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:29.447794Z", "completed_at": "2024-05-21T08:34:29.447799Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1736259460449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__list_tmp\"\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        description as list_description,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__list\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:28.395482Z", "completed_at": "2024-05-21T08:34:29.479788Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:29.480346Z", "completed_at": "2024-05-21T08:34:29.480352Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1913599967956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_user_id\n    \n as \n    \n    _fivetran_user_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(_fivetran_id as TEXT ) as event_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_event_id,\n        cast(_fivetran_user_id as TEXT ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_user_id as TEXT ) , email) as unique_user_key,\n        cast(campaign_id as TEXT ) as campaign_id,\n        cast(content_id as TEXT ) as content_id,\n        created_at,\n        cast( date_trunc('day', created_at) as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        cast(message_bus_id as TEXT ) as message_bus_id,\n        cast(message_id as TEXT ) as message_id,\n        cast(message_type_id as TEXT ) as message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:29.587401Z", "completed_at": "2024-05-21T08:34:30.614779Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.615571Z", "completed_at": "2024-05-21T08:34:30.615581Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.14603590965271, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__template_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT ) as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        cast(client_template_id as TEXT ) as client_template_id,\n        cast(creator_user_id as TEXT ) as creator_user_id,\n        cast(message_type_id as TEXT ) as message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__template_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:29.591911Z", "completed_at": "2024-05-21T08:34:30.615999Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.617615Z", "completed_at": "2024-05-21T08:34:30.617619Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1556720733642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsub_message_type_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n\n        cast(_fivetran_id as TEXT ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as TEXT ), email) as unique_user_key,\n        cast(message_type_id as TEXT ) as message_type_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(message_type_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unsub_message_type_unique_key,\n        \n        \n        rank() over(partition by email, message_type_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsub_message_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:29.575978Z", "completed_at": "2024-05-21T08:34:30.616635Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.617950Z", "completed_at": "2024-05-21T08:34:30.617954Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1989281177520752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__message_type_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    rate_limit_per_minute\n    \n as \n    \n    rate_limit_per_minute\n    \n, \n    \n    \n    subscription_policy\n    \n as \n    \n    subscription_policy\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as TEXT ) as message_type_id,\n        name as message_type_name,\n        cast(channel_id as TEXT ) as channel_id,\n        created_at as message_type_created_at,\n        frequency_cap,\n        rate_limit_per_minute,\n        subscription_policy,\n        updated_at as message_type_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__message_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.755709Z", "completed_at": "2024-05-21T08:34:30.760306Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.761187Z", "completed_at": "2024-05-21T08:34:30.761192Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016572952270507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_labels", "compiled": true, "compiled_code": "\n\nwith campaign_label_history as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_label_history\"\n\n), order_campaign_labels as (\n\n    select \n        *,\n        rank() over(partition by campaign_id order by updated_at desc) as latest_label_batch_index\n\n    from campaign_label_history\n\n), latest_labels as (\n\n    select *\n    from order_campaign_labels\n    where latest_label_batch_index = 1\n\n), aggregate_labels as (\n\n    select \n        campaign_id,\n        \n    string_agg(distinct label, ', ')\n\n as labels \n\n    from latest_labels\n    group by campaign_id\n)\n\nselect * from aggregate_labels", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__campaign_labels\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.746465Z", "completed_at": "2024-05-21T08:34:30.760887Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.762318Z", "completed_at": "2024-05-21T08:34:30.762321Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01835012435913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_suppression_list_history_campaign_id.3921289710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_suppression_list_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.764969Z", "completed_at": "2024-05-21T08:34:30.772834Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.773387Z", "completed_at": "2024-05-21T08:34:30.773392Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010579824447631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_label_history_campaign_id.1918cef89a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_label_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.768359Z", "completed_at": "2024-05-21T08:34:30.773643Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.774988Z", "completed_at": "2024-05-21T08:34:30.774991Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011267900466918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_lists", "compiled": true, "compiled_code": "with \n\n\n\ncampaign_suppression_list_history as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_suppression_list_history\"\n\n), \n\n\n\ncampaign_send_list_history as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_list_history\"\n\n), combine_list_histories as (\n\n\n\n    select \n        suppressed_list_id as list_id,\n        campaign_id,\n        updated_at,\n        'suppress' as list_activity\n    from campaign_suppression_list_history\n\n    union all \n\n\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        'send' as list_activity\n    from campaign_send_list_history\n\n), order_campaign_list_history as (\n\n    select\n      *,\n      row_number() over(partition by list_id, campaign_id order by updated_at desc) as latest_list_index\n    from combine_list_histories\n\n), latest_campaign_list_history as (\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        list_activity\n\n    from order_campaign_list_history \n    where latest_list_index = 1\n)\n\nselect *\nfrom latest_campaign_list_history", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__campaign_lists\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.776646Z", "completed_at": "2024-05-21T08:34:30.782151Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.782895Z", "completed_at": "2024-05-21T08:34:30.782899Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008273839950561523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id.208f9bf9ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_list_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.780022Z", "completed_at": "2024-05-21T08:34:30.782640Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.783826Z", "completed_at": "2024-05-21T08:34:30.783828Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005098104476928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_campaign", "compiled": true, "compiled_code": "with campaign_history as (\n  select *\n  from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_history\"\n\n), latest_campaign as (\n    select\n      *,\n      row_number() over(partition by campaign_id order by updated_at desc) as latest_campaign_index\n    from campaign_history\n)\n\nselect *\nfrom latest_campaign\nwhere latest_campaign_index = 1", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_campaign\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:29.580312Z", "completed_at": "2024-05-21T08:34:30.689645Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.690368Z", "completed_at": "2024-05-21T08:34:30.690374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2500817775726318, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    iterable_user_id\n    \n as \n    \n    iterable_user_id\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_id as TEXT ) as _fivetran_user_id,\n        lower(email) as email,\n        updated_at,\n        cast(user_id as TEXT ) as user_id,\n        first_name,\n        last_name,\n        cast(email_list_ids as TEXT) as email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        cast(iterable_user_id as TEXT ) as iterable_user_id,\n        _fivetran_synced,\n        coalesce(cast(_fivetran_id as TEXT ) , email) as unique_user_key\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.785977Z", "completed_at": "2024-05-21T08:34:30.794598Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.796074Z", "completed_at": "2024-05-21T08:34:30.796077Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01221013069152832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.81e1a1b9b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_history\"\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.792085Z", "completed_at": "2024-05-21T08:34:30.795765Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.797470Z", "completed_at": "2024-05-21T08:34:30.797473Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015604019165039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id.b7c36e4525", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__campaign_history\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.797926Z", "completed_at": "2024-05-21T08:34:30.806304Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.809323Z", "completed_at": "2024-05-21T08:34:30.809327Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013669729232788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id.182ceb9636", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__channel\"\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.802769Z", "completed_at": "2024-05-21T08:34:30.809560Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.810966Z", "completed_at": "2024-05-21T08:34:30.810970Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010341882705688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id.fc1eec7fbc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    channel_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__channel\"\nwhere channel_id is not null\ngroup by channel_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.807037Z", "completed_at": "2024-05-21T08:34:30.810742Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.812353Z", "completed_at": "2024-05-21T08:34:30.812356Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012847185134887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_extension_event_id.144dedcd30", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_extension\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.812834Z", "completed_at": "2024-05-21T08:34:30.819051Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.822713Z", "completed_at": "2024-05-21T08:34:30.822718Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012164115905761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__event_extension_unique_event_id.4f0d870433", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_event_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_extension\"\nwhere unique_event_id is not null\ngroup by unique_event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.816726Z", "completed_at": "2024-05-21T08:34:30.822933Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.824362Z", "completed_at": "2024-05-21T08:34:30.824365Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009685039520263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id.47029d839a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect list_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__list\"\nwhere list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.819755Z", "completed_at": "2024-05-21T08:34:30.824127Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.825730Z", "completed_at": "2024-05-21T08:34:30.825733Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013025045394897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id.1e73c3def7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    list_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__list\"\nwhere list_id is not null\ngroup by list_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.826198Z", "completed_at": "2024-05-21T08:34:30.830590Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.834314Z", "completed_at": "2024-05-21T08:34:30.834319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01282191276550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__event_unique_event_id__created_at.468c9e26a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_at\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event\"\n    group by unique_event_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.831203Z", "completed_at": "2024-05-21T08:34:30.837735Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.839073Z", "completed_at": "2024-05-21T08:34:30.839077Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010161876678466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id.370cd4bc9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.834586Z", "completed_at": "2024-05-21T08:34:30.838838Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.842591Z", "completed_at": "2024-05-21T08:34:30.842595Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012457847595214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.e0b90faa8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__template_history\"\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.840131Z", "completed_at": "2024-05-21T08:34:30.844168Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.848663Z", "completed_at": "2024-05-21T08:34:30.848668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01306295394897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id.14b24a1dfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect template_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__template_history\"\nwhere template_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.845117Z", "completed_at": "2024-05-21T08:34:30.852153Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.853391Z", "completed_at": "2024-05-21T08:34:30.853394Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012937307357788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_message_type_id.268a89ea6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsub_message_type\"\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.848944Z", "completed_at": "2024-05-21T08:34:30.852970Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.856796Z", "completed_at": "2024-05-21T08:34:30.856799Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012915372848510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsub_message_type_unsub_message_type_unique_key.2e13291de3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unsub_message_type_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsub_message_type\"\nwhere unsub_message_type_unique_key is not null\ngroup by unsub_message_type_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.853814Z", "completed_at": "2024-05-21T08:34:30.858356Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.861946Z", "completed_at": "2024-05-21T08:34:30.861950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012234926223754883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__message_type_channel", "compiled": true, "compiled_code": "with message_type as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__message_type\"\n\n), channel as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__channel\"\n\n), final as (\n\n    select \n        channel.*,\n        message_type.message_type_name,\n        message_type.message_type_id\n    from channel\n    left join message_type on channel.channel_id = message_type.channel_id\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__message_type_channel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.859327Z", "completed_at": "2024-05-21T08:34:30.865008Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.866523Z", "completed_at": "2024-05-21T08:34:30.866526Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009587287902832031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id.75eaa6fa62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__message_type\"\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.862230Z", "completed_at": "2024-05-21T08:34:30.865551Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.866934Z", "completed_at": "2024-05-21T08:34:30.866936Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010791778564453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id.0f75f83a34", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    message_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__message_type\"\nwhere message_type_id is not null\ngroup by message_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.867735Z", "completed_at": "2024-05-21T08:34:30.870774Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.874684Z", "completed_at": "2024-05-21T08:34:30.874688Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012959957122802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__recurring_campaigns", "compiled": true, "compiled_code": "with latest_campaign as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_campaign\"\n\n), recurring_campaign_join as (\n    select\n        latest_campaign.campaign_id,\n        latest_campaign.campaign_name,\n        latest_campaign.updated_at,\n        latest_campaign.campaign_state,\n        latest_campaign.campaign_type,\n        latest_campaign.send_size,\n        latest_campaign.start_at,\n        latest_campaign.ended_at,\n        latest_campaign.created_at,\n        latest_campaign.created_by_user_id,\n        latest_campaign.template_id,\n        latest_campaign.recurring_campaign_id,\n\n        recurring_campaign.campaign_name as recurring_campaign_name,\n        recurring_campaign.campaign_state as recurring_campaign_state,\n        recurring_campaign.send_size as recurring_campaign_send_size,\n        recurring_campaign.start_at as recurring_campaign_start_at\n\n    from latest_campaign\n\n    left join latest_campaign as recurring_campaign\n        on latest_campaign.recurring_campaign_id = recurring_campaign.campaign_id\n\n), final as (\n\n    select\n        recurring_campaign_join.*,\n        case when latest_campaign.recurring_campaign_id is not null then true \n        else false end as is_campaign_recurring\n\n    from recurring_campaign_join\n    left join latest_campaign on recurring_campaign_join.campaign_id = latest_campaign.recurring_campaign_id\n        and recurring_campaign_join.template_id = latest_campaign.template_id\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__recurring_campaigns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.871915Z", "completed_at": "2024-05-21T08:34:30.879603Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.881023Z", "completed_at": "2024-05-21T08:34:30.881026Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013978004455566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_user", "compiled": true, "compiled_code": "with user_history as (\n  select *\n  from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history\"\n\n), latest_user as (\n    select\n      *,\n      row_number() over(partition by unique_user_key order by updated_at desc) as latest_user_index\n    from user_history\n)\n\nselect *\nfrom latest_user\nwhere latest_user_index = 1", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.874925Z", "completed_at": "2024-05-21T08:34:30.880195Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.883997Z", "completed_at": "2024-05-21T08:34:30.884001Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013870000839233398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__list_user_history", "compiled": true, "compiled_code": "-- this model will serve to extract only email-list changes\nwith user_history as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history\"\n\n), previous_email_list_ids as (\n\n    select\n        *,\n        lag(email_list_ids) over(partition by unique_user_key order by updated_at asc) as previous_ids -- partition by email instead of unique_user_key here since this model is only for email-list users\n\n    from user_history \n\n), only_new_email_list_ids as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        email,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at\n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from previous_email_list_ids\n    where email_list_ids != coalesce(previous_ids, 'this is new') -- list ids are always stored in their arrays in numerical order\n\n), most_recent_list_ids as (\n\n    select \n        *,\n        row_number() over(partition by email order by updated_at desc) as latest_user_index\n    \n    from only_new_email_list_ids\n\n), final as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        latest_user_index = 1 as is_current        \n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from most_recent_list_ids\n)\n\nselect * from final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__list_user_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.881254Z", "completed_at": "2024-05-21T08:34:30.885709Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.887174Z", "completed_at": "2024-05-21T08:34:30.887177Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012181997299194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_unique_user_key__updated_at.3e120444d3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, updated_at\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history\"\n    group by unique_user_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.889888Z", "completed_at": "2024-05-21T08:34:30.893254Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.904584Z", "completed_at": "2024-05-21T08:34:30.904589Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019169092178344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_template", "compiled": true, "compiled_code": "with template_history as (\n  select *\n  from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__template_history\"\n\n), order_template as (\n    select\n      *,\n      row_number() over(partition by template_id order by updated_at desc) as latest_template_index\n    from template_history\n\n), latest_template as (\n\n    select *\n    from order_template\n    where latest_template_index = 1\n\n), message_type_channel as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__message_type_channel\"\n\n), template_join as (\n\n    select \n        latest_template.*,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium\n\n    from latest_template \n    left join message_type_channel \n        on latest_template.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom template_join", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_template\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.887408Z", "completed_at": "2024-05-21T08:34:30.903819Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.905032Z", "completed_at": "2024-05-21T08:34:30.905035Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02013111114501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_unique_user_key.2845af2127", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_history\"\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.893482Z", "completed_at": "2024-05-21T08:34:30.904808Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.906674Z", "completed_at": "2024-05-21T08:34:30.906677Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014706134796142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__list_user_unnest", "compiled": true, "compiled_code": "\n\nwith user_history as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__list_user_history\" as user_history\n\n    \n    \n    where user_history.updated_at >= coalesce((select min(updated_at) from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__list_user_unnest\" where is_current), '2010-01-01')\n    \n\n\n), unnest_email_array as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        phone_number,\n        updated_at,\n        is_current,\n        email_list_ids,\n        case when email_list_ids != '[]' then\n             email_list_id  \n            else null \n            end as email_list_id\n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from user_history\n\n     \n    cross join \n        json_array_elements_text(cast((\n            case when email_list_ids = '[]' then '[\"is_null\"]' \n            else email_list_ids end) as json)) as email_list_id), adjust_nulls as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        case when email_list_ids = '[\"is_null\"]' then '[]' else email_list_ids end as email_list_ids,\n        cast(NULLIF(email_list_id, 'is_null') as integer) as list_id\n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from unnest_email_array\n\n), final as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        email,\n        first_name,\n        last_name,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        email_list_ids,\n        list_id,\n        md5(cast(coalesce(cast(unique_user_key as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(list_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_key,\n        cast( date_trunc('day', updated_at) as date) as date_day\n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from adjust_nulls\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__list_user_unnest\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.924957Z", "completed_at": "2024-05-21T08:34:30.927692Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.928167Z", "completed_at": "2024-05-21T08:34:30.928172Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004564046859741211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__list_user_history", "compiled": true, "compiled_code": "with user_list_unnest as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__list_user_unnest\"\n\n), lists as (\n\n    select * \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__list\"\n\n), final as (\n    select\n        user_list_unnest.unique_user_key,\n        user_list_unnest._fivetran_user_id,\n        user_list_unnest.user_id,\n        user_list_unnest.email as user_email,\n        user_list_unnest.first_name as user_first_name,\n        user_list_unnest.last_name as user_last_name,\n        user_list_unnest.signup_date as user_signup_date,\n        user_list_unnest.signup_source as user_signup_source,\n        user_list_unnest.updated_at as user_updated_at,\n        user_list_unnest.list_id,\n        user_list_unnest.is_current,\n        lists.list_name,\n        lists.list_type,\n        lists.created_at as list_created_at           \n        \n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n    from user_list_unnest\n    left join lists\n        on lists.list_id = user_list_unnest.list_id\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__list_user_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.929723Z", "completed_at": "2024-05-21T08:34:30.932920Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:30.933372Z", "completed_at": "2024-05-21T08:34:30.933376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004572868347167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_unique_user_key__list_id__user_updated_at.343b33d606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, list_id, user_updated_at\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__list_user_history\"\n    group by unique_user_key, list_id, user_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.733956Z", "completed_at": "2024-05-21T08:34:31.725541Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.726500Z", "completed_at": "2024-05-21T08:34:31.726515Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.10263991355896, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel", "compiled": true, "compiled_code": "with base as (\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsubscribed_channel_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as TEXT) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n\n        cast(_fivetran_id as TEXT ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as TEXT ), email) as unique_user_key,\n        cast(channel_id as TEXT ) as channel_id,\n        md5(cast(coalesce(cast(_fivetran_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(channel_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unsub_channel_unique_key,\n        \n        \n        rank() over(partition by email, channel_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsubscribed_channel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:31.843882Z", "completed_at": "2024-05-21T08:34:31.861226Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.862009Z", "completed_at": "2024-05-21T08:34:31.862018Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023808002471923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_channel_id.da0ed9e9be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsubscribed_channel\"\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:31.854787Z", "completed_at": "2024-05-21T08:34:31.862402Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.864611Z", "completed_at": "2024-05-21T08:34:31.864616Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02451014518737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__user_unsubscriptions", "compiled": true, "compiled_code": "with message_type_channel as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__message_type_channel\"\n\n), user_unsubscribed_channel as (\n\n    select\n        *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsubscribed_channel\"\n    where latest_batch_index = 1\n\n\n), user_unsubscribed_message_type as (\n\n    select\n        *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsub_message_type\"\n    where latest_batch_index = 1\n\n\n\n), combine as (\n\n    select \n        _fivetran_user_id,\n        unique_user_key,\n        channel_id,\n        cast(null as TEXT) as message_type_id,\n        updated_at\n    from user_unsubscribed_channel\n\n\n\n    union all\n\n    select \n        _fivetran_user_id,\n        unique_user_key,\n        cast(null as TEXT) as channel_id,\n        message_type_id,\n        updated_at\n    from user_unsubscribed_message_type\n\n\n), final as (\n\n    select \n        combine._fivetran_user_id,\n        combine.unique_user_key,\n        -- coalescing since message_type -> channel goes up a grain\n        coalesce(combine.channel_id, message_type_channel.channel_id) as channel_id,\n        coalesce(combine.message_type_id, message_type_channel.message_type_id) as message_type_id,\n        combine.updated_at,\n        message_type_channel.channel_name,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium,\n        case when combine.channel_id is not null then true else false end as is_unsubscribed_channel_wide\n\n    from combine\n\n    -- unsubscribing from an entire channel unsubscribes a user from all message types in that channel\n    join message_type_channel \n        on combine.channel_id = message_type_channel.channel_id\n        or combine.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_unsubscriptions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:31.850175Z", "completed_at": "2024-05-21T08:34:31.863489Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.864993Z", "completed_at": "2024-05-21T08:34:31.864997Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026028156280517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsubscribed_channel_unsub_channel_unique_key.48ad1606c9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unsub_channel_unique_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__user_unsubscribed_channel\"\nwhere unsub_channel_unique_key is not null\ngroup by unsub_channel_unique_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:31.869121Z", "completed_at": "2024-05-21T08:34:31.878169Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.879045Z", "completed_at": "2024-05-21T08:34:31.879050Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012187719345092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_unique_user_key__message_type_id__channel_id__is_unsubscribed_channel_wide.54aad019b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, message_type_id, channel_id, is_unsubscribed_channel_wide\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_unsubscriptions\"\n    group by unique_user_key, message_type_id, channel_id, is_unsubscribed_channel_wide\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:31.873917Z", "completed_at": "2024-05-21T08:34:31.878765Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.880164Z", "completed_at": "2024-05-21T08:34:31.880168Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012601852416992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__user_unsubscriptions_unique_user_key.f8db72932b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_unsubscriptions\"\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:30.908183Z", "completed_at": "2024-05-21T08:34:31.924716Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:31.925338Z", "completed_at": "2024-05-21T08:34:31.925343Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.128098964691162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__events", "compiled": true, "compiled_code": "\n\nwith events as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event\"\n\n    \n    where created_at >= (select max(created_at) from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__events\" )\n    \n\n), campaign as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__recurring_campaigns\"\n\n), event_extension as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"stg_iterable__event_extension\"\n\n), users as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_user\"\n\n), message_type_channel as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__message_type_channel\"\n\n), template as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_template\"\n\n), event_join as (\n\n    select \n        events.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.is_campaign_recurring,\n        campaign.recurring_campaign_name,\n        campaign.recurring_campaign_id,\n\n        users.user_id,\n        users.first_name || ' ' || users.last_name as user_full_name,\n\n        message_type_channel.message_type_name,\n        message_type_channel.message_medium,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n\n        \n        \"is_app_already_running\",\n  \"badge\",\n  \"catalog_collection_count\",\n  \"catalog_lookup_count\",\n  \"canonical_url_id\",\n  \"is_content_available\",\n  \"device\",\n  \"email_id\",\n  \"email_subject\",\n  \"experiment_id\",\n  \"from_phone_number_id\",\n  \"from_smssender_id\",\n  \"link_id\",\n  \"link_url\",\n  \"locale\",\n  \"payload\",\n  \"platform_endpoint\",\n  \"push_message\",\n  \"region\",\n  \"sms_message\",\n  \"to_phone_number\",\n  \"url\",\n  \"workflow_id\",\n  \"workflow_name\",\n  \"city\",\n  \"clicked_url\",\n  \"country\",\n  \"error_code\",\n  \"expires_at\",\n  \"from_phone_number\",\n  \"in_app_body\",\n  \"is_sms_estimation\",\n  \"labels\",\n  \"message_status\",\n  \"mms_send_count\",\n  \"reason\",\n  \"sms_send_count\"\n        ,\n        campaign.template_id,\n        template.template_name,\n        template.creator_user_id as template_creator_user_id\n        \n    from events\n    left join event_extension\n        on events.unique_event_id = event_extension.unique_event_id\n    left join campaign\n        on events.campaign_id = campaign.campaign_id\n    left join users\n        on events.unique_user_key = users.unique_user_key -- unique_user_key = _fivetran_user_id if exists, otherwise email\n    left join message_type_channel\n        on events.message_type_id = message_type_channel.message_type_id\n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom event_join", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:32.041547Z", "completed_at": "2024-05-21T08:34:32.061093Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:32.061930Z", "completed_at": "2024-05-21T08:34:32.061939Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02511310577392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__user_campaign", "compiled": true, "compiled_code": "with events as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__events\"\n\n), pivot_out_events as (\n\n-- this will be at the user-campaign-experiment variation level\n-- if experiment_id is null, the user-campaign interactions happened outside of an experiment\n-- if campaign_id is null, the user interactions are organic\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        campaign_id,\n        experiment_id,\n        email as user_email,\n        user_full_name,\n        case when campaign_id is null then 'organic' else campaign_name end as campaign_name,\n        template_id,\n        template_name,\n\n        recurring_campaign_id,\n        recurring_campaign_name,\n\n        min(created_at) as first_event_at,\n        max(created_at) as last_event_at\n\n        -- count up the number of instances of each metric\n        -- `iterable__event_metrics` is set by default to all events brought in by fivetran+iterable\n        -- https://fivetran.com/docs/applications/iterable#schemanotes\n        \n        , sum(case when lower(event_name) = 'emailclick' then 1 else 0 end) \n            as total_emailclick \n        \n        , sum(case when lower(event_name) = 'emailunsubscribe' then 1 else 0 end) \n            as total_emailunsubscribe \n        \n        , sum(case when lower(event_name) = 'emailcomplaint' then 1 else 0 end) \n            as total_emailcomplaint \n        \n        , sum(case when lower(event_name) = 'customevent' then 1 else 0 end) \n            as total_customevent \n        \n        , sum(case when lower(event_name) = 'emailsubscribe' then 1 else 0 end) \n            as total_emailsubscribe \n        \n        , sum(case when lower(event_name) = 'emailopen' then 1 else 0 end) \n            as total_emailopen \n        \n        , sum(case when lower(event_name) = 'pushsend' then 1 else 0 end) \n            as total_pushsend \n        \n        , sum(case when lower(event_name) = 'smsbounce' then 1 else 0 end) \n            as total_smsbounce \n        \n        , sum(case when lower(event_name) = 'pushbounce' then 1 else 0 end) \n            as total_pushbounce \n        \n        , sum(case when lower(event_name) = 'inappsendskip' then 1 else 0 end) \n            as total_inappsendskip \n        \n        , sum(case when lower(event_name) = 'smssend' then 1 else 0 end) \n            as total_smssend \n        \n        , sum(case when lower(event_name) = 'inappsend' then 1 else 0 end) \n            as total_inappsend \n        \n        , sum(case when lower(event_name) = 'pushopen' then 1 else 0 end) \n            as total_pushopen \n        \n        , sum(case when lower(event_name) = 'emailsend' then 1 else 0 end) \n            as total_emailsend \n        \n        , sum(case when lower(event_name) = 'pushsendskip' then 1 else 0 end) \n            as total_pushsendskip \n        \n        , sum(case when lower(event_name) = 'inappopen' then 1 else 0 end) \n            as total_inappopen \n        \n        , sum(case when lower(event_name) = 'emailsendskip' then 1 else 0 end) \n            as total_emailsendskip \n        \n        , sum(case when lower(event_name) = 'emailbounce' then 1 else 0 end) \n            as total_emailbounce \n        \n        , sum(case when lower(event_name) = 'inappclick' then 1 else 0 end) \n            as total_inappclick \n        \n        , sum(case when lower(event_name) = 'pushuninstall' then 1 else 0 end) \n            as total_pushuninstall \n        \n\n    from events\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n)\n\nselect *\nfrom pivot_out_events", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_campaign\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:32.051886Z", "completed_at": "2024-05-21T08:34:32.062306Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:32.065142Z", "completed_at": "2024-05-21T08:34:32.065147Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.027801990509033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__events_unique_event_id__created_on.cd499f24d5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_on\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__events\"\n    group by unique_event_id, created_on\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:32.056846Z", "completed_at": "2024-05-21T08:34:32.063366Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:32.065503Z", "completed_at": "2024-05-21T08:34:32.065506Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02715921401977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__events_event_id.ed1d28a650", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__events\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:32.081726Z", "completed_at": "2024-05-21T08:34:32.085451Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:32.085979Z", "completed_at": "2024-05-21T08:34:32.085984Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006369113922119141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_unique_user_key__campaign_id__experiment_id.efc49a8bf9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, campaign_id, experiment_id\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_campaign\"\n    group by unique_user_key, campaign_id, experiment_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:32.074421Z", "completed_at": "2024-05-21T08:34:33.103317Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:33.105411Z", "completed_at": "2024-05-21T08:34:33.105425Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1500239372253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__user_event_metrics", "compiled": true, "compiled_code": "with user_campaign as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_campaign\"\n\n), user_event_metrics as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        user_email, \n        count(distinct campaign_id) as count_total_campaigns,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        , sum( total_emailclick ) as total_emailclick\n            \n        \n            \n        , sum( total_emailunsubscribe ) as total_emailunsubscribe\n            \n        \n            \n        , sum( total_emailcomplaint ) as total_emailcomplaint\n            \n        \n            \n        , sum( total_customevent ) as total_customevent\n            \n        \n            \n        , sum( total_emailsubscribe ) as total_emailsubscribe\n            \n        \n            \n        , sum( total_emailopen ) as total_emailopen\n            \n        \n            \n        , sum( total_pushsend ) as total_pushsend\n            \n        \n            \n        , sum( total_smsbounce ) as total_smsbounce\n            \n        \n            \n        , sum( total_pushbounce ) as total_pushbounce\n            \n        \n            \n        , sum( total_inappsendskip ) as total_inappsendskip\n            \n        \n            \n        , sum( total_smssend ) as total_smssend\n            \n        \n            \n        , sum( total_inappsend ) as total_inappsend\n            \n        \n            \n        , sum( total_pushopen ) as total_pushopen\n            \n        \n            \n        , sum( total_emailsend ) as total_emailsend\n            \n        \n            \n        , sum( total_pushsendskip ) as total_pushsendskip\n            \n        \n            \n        , sum( total_inappopen ) as total_inappopen\n            \n        \n            \n        , sum( total_emailsendskip ) as total_emailsendskip\n            \n        \n            \n        , sum( total_emailbounce ) as total_emailbounce\n            \n        \n            \n        , sum( total_inappclick ) as total_inappclick\n            \n        \n            \n        , sum( total_pushuninstall ) as total_pushuninstall\n            \n        from user_campaign\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom user_event_metrics", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__user_event_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:32.068763Z", "completed_at": "2024-05-21T08:34:33.103911Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:33.105888Z", "completed_at": "2024-05-21T08:34:33.105893Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.153618335723877, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_event_metrics", "compiled": true, "compiled_code": "with user_campaign as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__user_campaign\"\n\n), campaign_user_event_metrics as (\n\n    select\n        campaign_id,\n        template_id,\n        experiment_id,\n        count(distinct unique_user_key) as count_unique_users\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , sum( total_emailclick ) as total_emailclick\n            , count(distinct case when total_emailclick > 0 then user_email else null end) as unique_total_emailclick\n            \n        \n            \n            , sum( total_emailunsubscribe ) as total_emailunsubscribe\n            , count(distinct case when total_emailunsubscribe > 0 then user_email else null end) as unique_total_emailunsubscribe\n            \n        \n            \n            , sum( total_emailcomplaint ) as total_emailcomplaint\n            , count(distinct case when total_emailcomplaint > 0 then user_email else null end) as unique_total_emailcomplaint\n            \n        \n            \n            , sum( total_customevent ) as total_customevent\n            , count(distinct case when total_customevent > 0 then user_email else null end) as unique_total_customevent\n            \n        \n            \n            , sum( total_emailsubscribe ) as total_emailsubscribe\n            , count(distinct case when total_emailsubscribe > 0 then user_email else null end) as unique_total_emailsubscribe\n            \n        \n            \n            , sum( total_emailopen ) as total_emailopen\n            , count(distinct case when total_emailopen > 0 then user_email else null end) as unique_total_emailopen\n            \n        \n            \n            , sum( total_pushsend ) as total_pushsend\n            , count(distinct case when total_pushsend > 0 then user_email else null end) as unique_total_pushsend\n            \n        \n            \n            , sum( total_smsbounce ) as total_smsbounce\n            , count(distinct case when total_smsbounce > 0 then user_email else null end) as unique_total_smsbounce\n            \n        \n            \n            , sum( total_pushbounce ) as total_pushbounce\n            , count(distinct case when total_pushbounce > 0 then user_email else null end) as unique_total_pushbounce\n            \n        \n            \n            , sum( total_inappsendskip ) as total_inappsendskip\n            , count(distinct case when total_inappsendskip > 0 then user_email else null end) as unique_total_inappsendskip\n            \n        \n            \n            , sum( total_smssend ) as total_smssend\n            , count(distinct case when total_smssend > 0 then user_email else null end) as unique_total_smssend\n            \n        \n            \n            , sum( total_inappsend ) as total_inappsend\n            , count(distinct case when total_inappsend > 0 then user_email else null end) as unique_total_inappsend\n            \n        \n            \n            , sum( total_pushopen ) as total_pushopen\n            , count(distinct case when total_pushopen > 0 then user_email else null end) as unique_total_pushopen\n            \n        \n            \n            , sum( total_emailsend ) as total_emailsend\n            , count(distinct case when total_emailsend > 0 then user_email else null end) as unique_total_emailsend\n            \n        \n            \n            , sum( total_pushsendskip ) as total_pushsendskip\n            , count(distinct case when total_pushsendskip > 0 then user_email else null end) as unique_total_pushsendskip\n            \n        \n            \n            , sum( total_inappopen ) as total_inappopen\n            , count(distinct case when total_inappopen > 0 then user_email else null end) as unique_total_inappopen\n            \n        \n            \n            , sum( total_emailsendskip ) as total_emailsendskip\n            , count(distinct case when total_emailsendskip > 0 then user_email else null end) as unique_total_emailsendskip\n            \n        \n            \n            , sum( total_emailbounce ) as total_emailbounce\n            , count(distinct case when total_emailbounce > 0 then user_email else null end) as unique_total_emailbounce\n            \n        \n            \n            , sum( total_inappclick ) as total_inappclick\n            , count(distinct case when total_inappclick > 0 then user_email else null end) as unique_total_inappclick\n            \n        \n            \n            , sum( total_pushuninstall ) as total_pushuninstall\n            , count(distinct case when total_pushuninstall > 0 then user_email else null end) as unique_total_pushuninstall\n            \n        from user_campaign\n    group by 1,2,3\n\n)\n\nselect *\nfrom campaign_user_event_metrics", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__campaign_event_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:33.234556Z", "completed_at": "2024-05-21T08:34:34.400148Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:34.402126Z", "completed_at": "2024-05-21T08:34:34.402132Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2787909507751465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__campaigns", "compiled": true, "compiled_code": "with campaign_event_metrics as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__campaign_event_metrics\"\n\n), campaign_list_metrics as (\n\n    select\n        campaign_id,\n        sum(case when list_activity = 'send' then 1 else 0 end) as count_send_lists,\n        sum(case when list_activity = 'suppress' then 1 else 0 end) as count_suppress_lists\n    \n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__campaign_lists\"\n    group by campaign_id\n\n), campaign as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__recurring_campaigns\"\n    \n\n), campaign_labels as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__campaign_labels\"\n\n\n\n), template as (\n    -- rebringing this in (it is brought in iterable__events) in case any campaigns don't have events yet\n    -- this will result in some DAG ugliness but maintains template info for non-sent campaigns\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__latest_template\"\n\n), campaign_join as (\n\n     -- these are both in campaigns\n\n    -- this query will be at the campaign-experiment variation grain\n    select\n        campaign.*,\n        \"experiment_id\",\n  \"count_unique_users\",\n  \"total_emailclick\",\n  \"unique_total_emailclick\",\n  \"total_emailunsubscribe\",\n  \"unique_total_emailunsubscribe\",\n  \"total_emailcomplaint\",\n  \"unique_total_emailcomplaint\",\n  \"total_customevent\",\n  \"unique_total_customevent\",\n  \"total_emailsubscribe\",\n  \"unique_total_emailsubscribe\",\n  \"total_emailopen\",\n  \"unique_total_emailopen\",\n  \"total_pushsend\",\n  \"unique_total_pushsend\",\n  \"total_smsbounce\",\n  \"unique_total_smsbounce\",\n  \"total_pushbounce\",\n  \"unique_total_pushbounce\",\n  \"total_inappsendskip\",\n  \"unique_total_inappsendskip\",\n  \"total_smssend\",\n  \"unique_total_smssend\",\n  \"total_inappsend\",\n  \"unique_total_inappsend\",\n  \"total_pushopen\",\n  \"unique_total_pushopen\",\n  \"total_emailsend\",\n  \"unique_total_emailsend\",\n  \"total_pushsendskip\",\n  \"unique_total_pushsendskip\",\n  \"total_inappopen\",\n  \"unique_total_inappopen\",\n  \"total_emailsendskip\",\n  \"unique_total_emailsendskip\",\n  \"total_emailbounce\",\n  \"unique_total_emailbounce\",\n  \"total_inappclick\",\n  \"unique_total_inappclick\",\n  \"total_pushuninstall\",\n  \"unique_total_pushuninstall\"\n        , \n        campaign_list_metrics.count_send_lists,\n        campaign_list_metrics.count_suppress_lists,\n        \n        campaign_labels.labels,\n        \n        template.template_name,\n        template.creator_user_id as template_creator_user_id,\n        template.message_medium,\n        template.message_type_name,\n        template.channel_name,\n        template.channel_id,\n        template.channel_type\n\n    from campaign\n    left join campaign_event_metrics \n        on campaign.campaign_id = campaign_event_metrics.campaign_id\n        and campaign.template_id = campaign_event_metrics.template_id\n    left join campaign_list_metrics \n        on campaign.campaign_id = campaign_list_metrics.campaign_id\n\n    \n    left join campaign_labels \n        on campaign.campaign_id = campaign_labels.campaign_id\n    \n    \n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom campaign_join", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__campaigns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:33.223422Z", "completed_at": "2024-05-21T08:34:34.399595Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:34.401612Z", "completed_at": "2024-05-21T08:34:34.401629Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.286851167678833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__users", "compiled": true, "compiled_code": "with user_event_metrics as (\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__user_event_metrics\"\n\n), user_unnested as (\n    -- this has all the user fields we're looking to pass through\n\n    select *\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"int_iterable__list_user_unnest\"\n\n    -- limit to current lists they are a member of. each list-user combo is a unique row, which we will roll up\n    where is_current\n\n), user_with_list_metrics as (\n\n    select\n        user_id,\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        email_list_ids,\n        count(distinct list_id) as count_lists\n\n    from user_unnested\n    -- roll up to the user\n    group by 1,2,3,4,5,6,7,8,9,10,11\n\n), user_join as (\n\n    select \n        user_with_list_metrics.*,\n        \"count_total_campaigns\",\n  \"first_event_at\",\n  \"last_event_at\",\n  \"total_emailclick\",\n  \"total_emailunsubscribe\",\n  \"total_emailcomplaint\",\n  \"total_customevent\",\n  \"total_emailsubscribe\",\n  \"total_emailopen\",\n  \"total_pushsend\",\n  \"total_smsbounce\",\n  \"total_pushbounce\",\n  \"total_inappsendskip\",\n  \"total_smssend\",\n  \"total_inappsend\",\n  \"total_pushopen\",\n  \"total_emailsend\",\n  \"total_pushsendskip\",\n  \"total_inappopen\",\n  \"total_emailsendskip\",\n  \"total_emailbounce\",\n  \"total_inappclick\",\n  \"total_pushuninstall\"\n\n    from user_with_list_metrics\n    left join user_event_metrics\n        on user_with_list_metrics.unique_user_key = user_event_metrics.unique_user_key\n)\n\nselect *\nfrom user_join", "relation_name": "\"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:34.510650Z", "completed_at": "2024-05-21T08:34:34.528341Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:34.534804Z", "completed_at": "2024-05-21T08:34:34.534811Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030256986618041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id__template_id.49ae15e83c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, experiment_id, template_id\n    from \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__campaigns\"\n    group by campaign_id, experiment_id, template_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:34.518276Z", "completed_at": "2024-05-21T08:34:34.533419Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:34.535464Z", "completed_at": "2024-05-21T08:34:34.535468Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029495954513549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__campaigns_campaign_id.03c9448919", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__campaigns\"\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:34.524126Z", "completed_at": "2024-05-21T08:34:34.534464Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:34.537566Z", "completed_at": "2024-05-21T08:34:34.537570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021016836166381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__users_unique_user_key.4ca37a26c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__users\"\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-21T08:34:34.528815Z", "completed_at": "2024-05-21T08:34:34.535127Z"}, {"name": "execute", "started_at": "2024-05-21T08:34:34.537946Z", "completed_at": "2024-05-21T08:34:34.537950Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01653885841369629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.unique_iterable__users_unique_user_key.a57f431f59", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    unique_user_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"iterable_integration_tests_09_iterable_dev\".\"iterable__users\"\nwhere unique_user_key is not null\ngroup by unique_user_key\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 11.016515970230103, "args": {"printer_width": 80, "indirect_selection": "eager", "macro_debugging": false, "partial_parse": true, "invocation_command": "dbt docs generate -t postgres", "profiles_dir": "/Users/avinash.kunnath/.dbt", "show_resource_report": false, "select": [], "enable_legacy_logger": false, "favor_state": false, "empty_catalog": false, "write_json": true, "log_format": "default", "defer": false, "require_explicit_package_overrides_for_builtin_materializations": false, "target": "postgres", "log_file_max_bytes": 10485760, "log_level": "info", "populate_cache": true, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "print": true, "static": false, "version_check": true, "compile": true, "use_colors_file": true, "log_level_file": "debug", "quiet": false, "send_anonymous_usage_stats": true, "vars": {}, "exclude": [], "static_parser": true, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/iterable/dbt_iterable/integration_tests/logs", "cache_selected_only": false, "partial_parse_file_diff": true, "strict_mode": false, "introspect": true, "which": "generate", "log_format_file": "debug", "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/iterable/dbt_iterable/integration_tests"}}