{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-07-23T22:12:41.453574Z", "invocation_id": "261d32fc-7108-4944-8255-70f67b62c919", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.856384Z", "completed_at": "2024-07-23T22:12:34.863873Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.865962Z", "completed_at": "2024-07-23T22:12:34.865974Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.022109031677246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`campaign_list_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.848421Z", "completed_at": "2024-07-23T22:12:34.864190Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.866242Z", "completed_at": "2024-07-23T22:12:34.866248Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023554086685180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`campaign_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.861345Z", "completed_at": "2024-07-23T22:12:34.864490Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.866501Z", "completed_at": "2024-07-23T22:12:34.866505Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02193284034729004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_extension_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`event_extension`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_extension_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.858920Z", "completed_at": "2024-07-23T22:12:34.864751Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.866757Z", "completed_at": "2024-07-23T22:12:34.866761Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023035764694213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`channel`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.876677Z", "completed_at": "2024-07-23T22:12:34.881041Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.882520Z", "completed_at": "2024-07-23T22:12:34.882525Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012335777282714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`message_type`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.872807Z", "completed_at": "2024-07-23T22:12:34.881287Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.882738Z", "completed_at": "2024-07-23T22:12:34.882741Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013709783554077148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`event`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.874782Z", "completed_at": "2024-07-23T22:12:34.881523Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.883134Z", "completed_at": "2024-07-23T22:12:34.883138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014039754867553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`list`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.878859Z", "completed_at": "2024-07-23T22:12:34.882104Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.884313Z", "completed_at": "2024-07-23T22:12:34.884318Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014076948165893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`template_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.888125Z", "completed_at": "2024-07-23T22:12:34.897997Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.899123Z", "completed_at": "2024-07-23T22:12:34.899127Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013334035873413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history_tmp", "compiled": true, "compiled_code": "select * \nfrom `dbt-package-testing`.`iterable`.`user_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.896461Z", "completed_at": "2024-07-23T22:12:34.899894Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:34.900932Z", "completed_at": "2024-07-23T22:12:34.900935Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013754129409790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_new_project.my_first_dbt_model", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.901634Z", "completed_at": "2024-07-23T22:12:35.268180Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:35.269486Z", "completed_at": "2024-07-23T22:12:35.269493Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3696269989013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_list_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    list_id\n    \n as \n    \n    list_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(campaign_id as string) as campaign_id,\n        cast(list_id as string) as list_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.904527Z", "completed_at": "2024-07-23T22:12:35.268460Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:35.269766Z", "completed_at": "2024-07-23T22:12:35.269769Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3668222427368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__campaign_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_state\n    \n as \n    \n    campaign_state\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_user_id\n    \n as \n    \n    created_by_user_id\n    \n, \n    \n    \n    updated_by_user_id\n    \n as \n    \n    updated_by_user_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    recurring_campaign_id\n    \n as \n    \n    recurring_campaign_id\n    \n, \n    \n    \n    send_size\n    \n as \n    \n    send_size\n    \n, \n    \n    \n    start_at\n    \n as \n    \n    start_at\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string) as campaign_id,\n        updated_at,\n        name as campaign_name,\n        campaign_state,\n        type as campaign_type,\n        send_size,\n        start_at,\n        ended_at,\n        created_at,\n        message_medium,\n        cast(recurring_campaign_id as string) as recurring_campaign_id,\n        cast(created_by_user_id as string ) as created_by_user_id,\n        cast(updated_by_user_id as string ) as updated_by_user_id,\n        cast(template_id as string) as template_id,\n        workflow_id,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:35.273705Z", "completed_at": "2024-07-23T22:12:35.701813Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:35.702782Z", "completed_at": "2024-07-23T22:12:35.702795Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4316091537475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__channel", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_type\n    \n as \n    \n    channel_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_medium\n    \n as \n    \n    message_medium\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as string ) as channel_id,\n        name as channel_name,\n        channel_type,\n        message_medium,\n        _fivetran_synced\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:35.272853Z", "completed_at": "2024-07-23T22:12:35.768243Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:35.768794Z", "completed_at": "2024-07-23T22:12:35.768799Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.49746203422546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event_extension", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_extension_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_already_running\n    \n as \n    \n    app_already_running\n    \n, \n    \n    \n    badge\n    \n as \n    \n    badge\n    \n, \n    \n    \n    catalog_collection_count\n    \n as \n    \n    catalog_collection_count\n    \n, \n    \n    \n    catalog_lookup_count\n    \n as \n    \n    catalog_lookup_count\n    \n, \n    \n    \n    canonical_url_id\n    \n as \n    \n    canonical_url_id\n    \n, \n    \n    \n    content_available\n    \n as \n    \n    content_available\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    device\n    \n as \n    \n    device\n    \n, \n    \n    \n    email_id\n    \n as \n    \n    email_id\n    \n, \n    \n    \n    email_subject\n    \n as \n    \n    email_subject\n    \n, \n    \n    \n    experiment_id\n    \n as \n    \n    experiment_id\n    \n, \n    \n    \n    from_phone_number_id\n    \n as \n    \n    from_phone_number_id\n    \n, \n    \n    \n    from_smssender_id\n    \n as \n    \n    from_smssender_id\n    \n, \n    \n    \n    link_id\n    \n as \n    \n    link_id\n    \n, \n    \n    \n    link_url\n    \n as \n    \n    link_url\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    payload\n    \n as \n    \n    payload\n    \n, \n    \n    \n    platform_endpoint\n    \n as \n    \n    platform_endpoint\n    \n, \n    \n    \n    push_message\n    \n as \n    \n    push_message\n    \n, \n    \n    \n    region\n    \n as \n    \n    region\n    \n, \n    \n    \n    sms_message\n    \n as \n    \n    sms_message\n    \n, \n    \n    \n    to_phone_number\n    \n as \n    \n    to_phone_number\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    workflow_id\n    \n as \n    \n    workflow_id\n    \n, \n    \n    \n    workflow_name\n    \n as \n    \n    workflow_name\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    clicked_url\n    \n as \n    \n    clicked_url\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    expires_at\n    \n as \n    \n    expires_at\n    \n, \n    \n    \n    from_phone_number\n    \n as \n    \n    from_phone_number\n    \n, \n    \n    \n    in_app_body\n    \n as \n    \n    in_app_body\n    \n, \n    \n    \n    is_sms_estimation\n    \n as \n    \n    is_sms_estimation\n    \n, \n    \n    \n    labels\n    \n as \n    \n    labels\n    \n, \n    \n    \n    message_status\n    \n as \n    \n    message_status\n    \n, \n    \n    \n    mms_send_count\n    \n as \n    \n    mms_send_count\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    sms_send_count\n    \n as \n    \n    sms_send_count\n    \n, \n    cast(null as string) as \n    \n    _fivetran_user_id\n    \n , \n    \n    \n    browser_token\n    \n as \n    \n    browser_token\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    select\n        cast(_fivetran_id as string ) as event_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id,\n        app_already_running as is_app_already_running,\n        badge,\n        catalog_collection_count,\n        catalog_lookup_count,\n        cast(canonical_url_id as string ) as canonical_url_id,\n        content_available as is_content_available,\n        cast(content_id as string ) as content_id,\n        device,\n        cast(email_id as string) as email_id,\n        email_subject,\n        experiment_id,\n        from_phone_number_id,\n        from_smssender_id,\n        cast(link_id as string ) as link_id,\n        link_url,\n        locale,\n        payload,\n        platform_endpoint,\n        push_message,\n        region,\n        sms_message,\n        to_phone_number,\n        url,\n        cast(workflow_id as string ) as workflow_id,\n        workflow_name,\n        city,\n        clicked_url,\n        country,\n        error_code,\n        expires_at,\n        from_phone_number,\n        in_app_body,\n        is_sms_estimation,\n        labels,\n        message_status,\n        mms_send_count,\n        reason,\n        sms_send_count,\n        _fivetran_synced,\n        cast(_fivetran_user_id as string ) as _fivetran_user_id\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        \n            \n                , browser_token\n            \n        \n    \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_extension`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:35.705975Z", "completed_at": "2024-07-23T22:12:36.106454Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.107241Z", "completed_at": "2024-07-23T22:12:36.107251Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4031972885131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__message_type", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type_tmp`\n    where not coalesce(_fivetran_deleted, false)\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    frequency_cap\n    \n as \n    \n    frequency_cap\n    \n, \n    \n    \n    rate_limit_per_minute\n    \n as \n    \n    rate_limit_per_minute\n    \n, \n    \n    \n    subscription_policy\n    \n as \n    \n    subscription_policy\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(id as string ) as message_type_id,\n        name as message_type_name,\n        cast(channel_id as string ) as channel_id,\n        created_at as message_type_created_at,\n        frequency_cap,\n        rate_limit_per_minute,\n        subscription_policy,\n        updated_at as message_type_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:35.770287Z", "completed_at": "2024-07-23T22:12:36.131918Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.132425Z", "completed_at": "2024-07-23T22:12:36.132430Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36315488815307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__event", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    cast(null as string) as \n    \n    _fivetran_user_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    event_name\n    \n as \n    \n    event_name\n    \n, \n    \n    \n    message_bus_id\n    \n as \n    \n    message_bus_id\n    \n, \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    recipient_state\n    \n as \n    \n    recipient_state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    unsub_source\n    \n as \n    \n    unsub_source\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n, \n    \n    \n    user_agent_device\n    \n as \n    \n    user_agent_device\n    \n, \n    \n    \n    transactional_data\n    \n as \n    \n    transactional_data\n    \n, \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select\n        cast(_fivetran_id as string ) as event_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(_fivetran_user_id as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_event_id,\n        cast(_fivetran_user_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_user_id as string ) , email) as unique_user_key,\n        cast(campaign_id as string ) as campaign_id,\n        cast(content_id as string ) as content_id,\n        created_at,\n        cast( timestamp_trunc(\n        cast(created_at as timestamp),\n        day\n    ) as date) as created_on,\n        lower(email) as email,\n        additional_properties,\n        event_name,\n        cast(message_bus_id as string ) as message_bus_id,\n        cast(message_id as string ) as message_id,\n        cast(message_type_id as string ) as message_type_id,\n        recipient_state,\n        status,\n        transactional_data,\n        unsub_source,\n        user_agent,\n        user_agent_device,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.109913Z", "completed_at": "2024-07-23T22:12:36.487608Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.491847Z", "completed_at": "2024-07-23T22:12:36.491861Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3838627338409424, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__list", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list_tmp`\n    where not coalesce(_fivetran_deleted, true)\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    list_type\n    \n as \n    \n    list_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as list_id,\n        name as list_name,\n        list_type,\n        created_at,\n        description as list_description,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.134055Z", "completed_at": "2024-07-23T22:12:36.494293Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.499604Z", "completed_at": "2024-07-23T22:12:36.499609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.367459774017334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__template_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    client_template_id\n    \n as \n    \n    client_template_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    creator_user_id\n    \n as \n    \n    creator_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    template_type\n    \n as \n    \n    template_type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as string ) as template_id,\n        name as template_name,\n        template_type,\n        created_at,\n        cast(client_template_id as string ) as client_template_id,\n        cast(creator_user_id as string ) as creator_user_id,\n        cast(message_type_id as string ) as message_type_id,\n        updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.504588Z", "completed_at": "2024-07-23T22:12:36.506656Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.507137Z", "completed_at": "2024-07-23T22:12:36.507141Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0042629241943359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_new_project.my_second_dbt_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\nselect *\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.508780Z", "completed_at": "2024-07-23T22:12:36.515758Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.516238Z", "completed_at": "2024-07-23T22:12:36.516242Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008485078811645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.not_null_my_first_dbt_model_id.5fb22c2710", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.517726Z", "completed_at": "2024-07-23T22:12:36.523849Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.524240Z", "completed_at": "2024-07-23T22:12:36.524244Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0074460506439208984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.unique_my_first_dbt_model_id.16e066b321", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_first_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.525601Z", "completed_at": "2024-07-23T22:12:36.527930Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.528329Z", "completed_at": "2024-07-23T22:12:36.528333Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0036656856536865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_lists", "compiled": true, "compiled_code": "with \n\n\n\ncampaign_send_list_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history`\n\n), combine_list_histories as (\n\n\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        'send' as list_activity\n    from campaign_send_list_history\n\n), order_campaign_list_history as (\n\n    select\n      *,\n      row_number() over(partition by list_id, campaign_id order by updated_at desc) as latest_list_index\n    from combine_list_histories\n\n), latest_campaign_list_history as (\n\n    select \n        list_id,\n        campaign_id,\n        updated_at,\n        list_activity\n\n    from order_campaign_list_history \n    where latest_list_index = 1\n)\n\nselect *\nfrom latest_campaign_list_history", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__campaign_lists`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.529696Z", "completed_at": "2024-07-23T22:12:36.531895Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.532278Z", "completed_at": "2024-07-23T22:12:36.532282Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003381967544555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_list_history_campaign_id.208f9bf9ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_list_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.533525Z", "completed_at": "2024-07-23T22:12:36.535279Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.535629Z", "completed_at": "2024-07-23T22:12:36.535632Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0028929710388183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_campaign", "compiled": true, "compiled_code": "with campaign_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`\n\n), latest_campaign as (\n    select\n      *,\n      row_number() over(partition by campaign_id order by updated_at desc) as latest_campaign_index\n    from campaign_history\n)\n\nselect *\nfrom latest_campaign\nwhere latest_campaign_index = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.536855Z", "completed_at": "2024-07-23T22:12:36.541376Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.541750Z", "completed_at": "2024-07-23T22:12:36.541753Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005668163299560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__campaign_history_campaign_id__updated_at.81e1a1b9b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`\n    group by campaign_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.542918Z", "completed_at": "2024-07-23T22:12:36.544967Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.545304Z", "completed_at": "2024-07-23T22:12:36.545306Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0031158924102783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__campaign_history_campaign_id.b7c36e4525", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__campaign_history`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.546416Z", "completed_at": "2024-07-23T22:12:36.548208Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.548513Z", "completed_at": "2024-07-23T22:12:36.548516Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002805948257446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__channel_channel_id.182ceb9636", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.549574Z", "completed_at": "2024-07-23T22:12:36.551355Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.551664Z", "completed_at": "2024-07-23T22:12:36.551667Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002763986587524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__channel_channel_id.fc1eec7fbc", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select channel_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`\n  where channel_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.552709Z", "completed_at": "2024-07-23T22:12:36.555147Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.555463Z", "completed_at": "2024-07-23T22:12:36.555466Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0034389495849609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_extension_event_id.144dedcd30", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_extension`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.556514Z", "completed_at": "2024-07-23T22:12:36.558186Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.558493Z", "completed_at": "2024-07-23T22:12:36.558495Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002641916275024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__event_extension_unique_event_id.4f0d870433", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_event_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event_extension`\n  where unique_event_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.559509Z", "completed_at": "2024-07-23T22:12:36.561300Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.561609Z", "completed_at": "2024-07-23T22:12:36.561611Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0027549266815185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__message_type_channel", "compiled": true, "compiled_code": "with message_type as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`\n\n), channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__channel`\n\n), final as (\n\n    select \n        channel.*,\n        message_type.message_type_name,\n        message_type.message_type_id\n    from channel\n    left join message_type on channel.channel_id = message_type.channel_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__message_type_channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.562710Z", "completed_at": "2024-07-23T22:12:36.564453Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.564775Z", "completed_at": "2024-07-23T22:12:36.564778Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002766132354736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__message_type_message_type_id.75eaa6fa62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.565794Z", "completed_at": "2024-07-23T22:12:36.567452Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.567759Z", "completed_at": "2024-07-23T22:12:36.567761Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0026323795318603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__message_type_message_type_id.0f75f83a34", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select message_type_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__message_type`\n  where message_type_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.568864Z", "completed_at": "2024-07-23T22:12:36.571046Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.571335Z", "completed_at": "2024-07-23T22:12:36.571338Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003103971481323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__event_unique_event_id__created_at.468c9e26a2", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`\n    group by unique_event_id, created_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.572298Z", "completed_at": "2024-07-23T22:12:36.573879Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.574154Z", "completed_at": "2024-07-23T22:12:36.574156Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0024628639221191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__event_event_id.370cd4bc9d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.575089Z", "completed_at": "2024-07-23T22:12:36.576662Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.576944Z", "completed_at": "2024-07-23T22:12:36.576947Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002460002899169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__list_list_id.47029d839a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect list_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`\nwhere list_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.577889Z", "completed_at": "2024-07-23T22:12:36.579539Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.579844Z", "completed_at": "2024-07-23T22:12:36.579846Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002560138702392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__list_list_id.1e73c3def7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select list_id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`\n  where list_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.580857Z", "completed_at": "2024-07-23T22:12:36.583525Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.583824Z", "completed_at": "2024-07-23T22:12:36.583826Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003629922866821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__template_history_template_id__updated_at.e0b90faa8d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        template_id, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`\n    group by template_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.584862Z", "completed_at": "2024-07-23T22:12:36.586546Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.586857Z", "completed_at": "2024-07-23T22:12:36.586859Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0026700496673583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__template_history_template_id.14b24a1dfe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect template_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`\nwhere template_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.587802Z", "completed_at": "2024-07-23T22:12:36.589410Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.589694Z", "completed_at": "2024-07-23T22:12:36.589696Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0025110244750976562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.not_null_my_second_dbt_model_id.151b76d778", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.590669Z", "completed_at": "2024-07-23T22:12:36.592196Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.592503Z", "completed_at": "2024-07-23T22:12:36.592506Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0024788379669189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_new_project.unique_my_second_dbt_model_id.57a0f8c493", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee`.`my_second_dbt_model`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.593508Z", "completed_at": "2024-07-23T22:12:36.594788Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.595076Z", "completed_at": "2024-07-23T22:12:36.595078Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002185821533203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__recurring_campaigns", "compiled": true, "compiled_code": "with latest_campaign as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_campaign`\n\n), recurring_campaign_join as (\n    select\n        latest_campaign.campaign_id,\n        latest_campaign.campaign_name,\n        latest_campaign.updated_at,\n        latest_campaign.campaign_state,\n        latest_campaign.campaign_type,\n        latest_campaign.send_size,\n        latest_campaign.start_at,\n        latest_campaign.ended_at,\n        latest_campaign.created_at,\n        latest_campaign.created_by_user_id,\n        latest_campaign.template_id,\n        latest_campaign.recurring_campaign_id,\n\n        recurring_campaign.campaign_name as recurring_campaign_name,\n        recurring_campaign.campaign_state as recurring_campaign_state,\n        recurring_campaign.send_size as recurring_campaign_send_size,\n        recurring_campaign.start_at as recurring_campaign_start_at\n\n    from latest_campaign\n\n    left join latest_campaign as recurring_campaign\n        on latest_campaign.recurring_campaign_id = recurring_campaign.campaign_id\n\n), final as (\n\n    select\n        recurring_campaign_join.*,\n        case when latest_campaign.recurring_campaign_id is not null then true \n        else false end as is_campaign_recurring\n\n    from recurring_campaign_join\n    left join latest_campaign on recurring_campaign_join.campaign_id = latest_campaign.recurring_campaign_id\n        and recurring_campaign_join.template_id = latest_campaign.template_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__recurring_campaigns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.596018Z", "completed_at": "2024-07-23T22:12:36.597409Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.597695Z", "completed_at": "2024-07-23T22:12:36.597697Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002277851104736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_template", "compiled": true, "compiled_code": "with template_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__template_history`\n\n), order_template as (\n    select\n      *,\n      row_number() over(partition by template_id order by updated_at desc) as latest_template_index\n    from template_history\n\n), latest_template as (\n\n    select *\n    from order_template\n    where latest_template_index = 1\n\n), message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__message_type_channel`\n\n), template_join as (\n\n    select \n        latest_template.*,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium\n\n    from latest_template \n    left join message_type_channel \n        on latest_template.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom template_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_template`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.495303Z", "completed_at": "2024-07-23T22:12:36.892569Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.893326Z", "completed_at": "2024-07-23T22:12:36.893333Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.40016794204711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_list_ids\n    \n as \n    \n    email_list_ids\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    signup_date\n    \n as \n    \n    signup_date\n    \n, \n    \n    \n    signup_source\n    \n as \n    \n    signup_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    cast(null as string) as \n    \n    iterable_user_id\n    \n , \n    \n    \n    phone_number_line_type\n    \n as phone_digits , \n    \n    \n    additional_properties\n    \n as \n    \n    additional_properties\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        lower(email) as email,\n        updated_at,\n        cast(user_id as string ) as user_id,\n        first_name,\n        last_name,\n        cast(email_list_ids as string) as email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        cast(iterable_user_id as string ) as iterable_user_id,\n        _fivetran_synced,\n        coalesce(cast(_fivetran_id as string ) , email) as unique_user_key\n\n        \n\n\n    \n        \n            \n                , phone_digits\n            \n        \n    \n        \n            \n                , additional_properties\n            \n        \n    \n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.896647Z", "completed_at": "2024-07-23T22:12:36.906143Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.907189Z", "completed_at": "2024-07-23T22:12:36.907193Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012765884399414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__latest_user", "compiled": true, "compiled_code": "with user_history as (\n  select *\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`\n\n), latest_user as (\n    select\n      *,\n      row_number() over(partition by unique_user_key order by updated_at desc) as latest_user_index\n    from user_history\n)\n\nselect *\nfrom latest_user\nwhere latest_user_index = 1", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_user`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.899593Z", "completed_at": "2024-07-23T22:12:36.906443Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.907448Z", "completed_at": "2024-07-23T22:12:36.907451Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012755870819091797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__list_user_history", "compiled": true, "compiled_code": "-- this model will serve to extract only email-list changes\nwith user_history as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`\n\n), previous_email_list_ids as (\n\n    select\n        *,\n        lag(email_list_ids) over(partition by unique_user_key order by updated_at asc) as previous_ids -- partition by email instead of unique_user_key here since this model is only for email-list users\n\n    from user_history \n\n), only_new_email_list_ids as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        email,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (previous_email_list_ids.phone_digits) as phone_digits\n    \n        , (previous_email_list_ids.additional_properties) as additional_properties\n    \n\n\n\n\n    from previous_email_list_ids\n    where email_list_ids != coalesce(previous_ids, 'this is new') -- list ids are always stored in their arrays in numerical order\n\n), most_recent_list_ids as (\n\n    select \n        *,\n        row_number() over(partition by email order by updated_at desc) as latest_user_index\n    \n    from only_new_email_list_ids\n\n), final as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        user_id,\n        first_name,\n        last_name,\n        email_list_ids,\n        phone_number,\n        signup_date,\n        signup_source,\n        updated_at,\n        latest_user_index = 1 as is_current        \n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (most_recent_list_ids.phone_digits) as phone_digits\n    \n        , (most_recent_list_ids.additional_properties) as additional_properties\n    \n\n\n\n\n    from most_recent_list_ids\n)\n\nselect * from final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__list_user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.910576Z", "completed_at": "2024-07-23T22:12:36.916074Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.916597Z", "completed_at": "2024-07-23T22:12:36.916601Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007989168167114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.dbt_utils_unique_combination_of_columns_stg_iterable__user_history_unique_user_key__updated_at.3e120444d3", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`\n    group by unique_user_key, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.913543Z", "completed_at": "2024-07-23T22:12:36.916834Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.917981Z", "completed_at": "2024-07-23T22:12:36.917984Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008996725082397461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_history_unique_user_key.2845af2127", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_history`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.919377Z", "completed_at": "2024-07-23T22:12:36.932906Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.933312Z", "completed_at": "2024-07-23T22:12:36.933315Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015449047088623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__events", "compiled": true, "compiled_code": "\n\nwith events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__event`\n\n    \n    where created_at >= (select max(created_at) from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__events` )\n    \n\n), campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__recurring_campaigns`\n\n\n\n\n), users as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_user`\n\n), message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__message_type_channel`\n\n), template as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_template`\n\n), event_join as (\n\n    select \n        events.*,\n        campaign.campaign_name,\n        campaign.campaign_type,\n        campaign.is_campaign_recurring,\n        campaign.recurring_campaign_name,\n        campaign.recurring_campaign_id,\n\n        users.user_id,\n        users.first_name || ' ' || users.last_name as user_full_name,\n\n        message_type_channel.message_type_name,\n        message_type_channel.message_medium,\n        message_type_channel.channel_id,\n        message_type_channel.channel_name,\n        message_type_channel.channel_type\n\n        \n\n        ,\n        campaign.template_id,\n        template.template_name,\n        template.creator_user_id as template_creator_user_id\n        \n    from events\n\n    \n\n    left join campaign\n        on events.campaign_id = campaign.campaign_id\n    left join users\n        on events.unique_user_key = users.unique_user_key -- unique_user_key = _fivetran_user_id if exists, otherwise email\n    left join message_type_channel\n        on events.message_type_id = message_type_channel.message_type_id\n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom event_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.926935Z", "completed_at": "2024-07-23T22:12:36.933967Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.934817Z", "completed_at": "2024-07-23T22:12:36.934820Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008944034576416016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__list_user_unnest", "compiled": true, "compiled_code": "\n\nwith user_history as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__list_user_history` as user_history\n\n    \n    \n    where user_history.updated_at >= coalesce((select min(updated_at) from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__list_user_unnest` where is_current), '2010-01-01')\n    \n\n\n), unnest_email_array as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        phone_number,\n        updated_at,\n        is_current,\n        email_list_ids,\n        case when email_list_ids != '[]' then\n             email_list_id  \n            else null \n            end as email_list_id\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (user_history.phone_digits) as phone_digits\n    \n        , (user_history.additional_properties) as additional_properties\n    \n\n\n\n\n    from user_history\n\n    \n    cross join \n        unnest(JSON_EXTRACT_STRING_ARRAY(\n            case when email_list_ids = '[]' then '[\"is_null\"]' \n            else email_list_ids end)) as email_list_id\n    ), adjust_nulls as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        user_id,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        case when email_list_ids = '[\"is_null\"]' then '[]' else email_list_ids end as email_list_ids,\n        cast(NULLIF(email_list_id, 'is_null') as INT64) as list_id\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (unnest_email_array.phone_digits) as phone_digits\n    \n        , (unnest_email_array.additional_properties) as additional_properties\n    \n\n\n\n\n    from unnest_email_array\n\n), final as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        email,\n        first_name,\n        last_name,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        is_current,\n        email_list_ids,\n        list_id,\n        to_hex(md5(cast(coalesce(cast(unique_user_key as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(list_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unique_key,\n        cast( timestamp_trunc(\n        cast(updated_at as timestamp),\n        day\n    ) as date) as date_day\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (adjust_nulls.phone_digits) as phone_digits\n    \n        , (adjust_nulls.additional_properties) as additional_properties\n    \n\n\n\n\n    from adjust_nulls\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__list_user_unnest`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.935552Z", "completed_at": "2024-07-23T22:12:36.942597Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.942988Z", "completed_at": "2024-07-23T22:12:36.942992Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008775949478149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__user_campaign", "compiled": true, "compiled_code": "with events as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__events`\n\n), pivot_out_events as (\n\n-- this will be at the user-campaign-experiment variation level\n-- if experiment_id is null, the user-campaign interactions happened outside of an experiment\n-- if campaign_id is null, the user interactions are organic\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        campaign_id,\n\n        \n\n        email as user_email,\n        user_full_name,\n        case when campaign_id is null then 'organic' else campaign_name end as campaign_name,\n        template_id,\n        template_name,\n\n        recurring_campaign_id,\n        recurring_campaign_name,\n\n        min(created_at) as first_event_at,\n        max(created_at) as last_event_at\n\n        -- count up the number of instances of each metric\n        -- `iterable__event_metrics` is set by default to all events brought in by fivetran+iterable\n        -- https://fivetran.com/docs/applications/iterable#schemanotes\n        \n        , sum(case when lower(event_name) = 'emailclick' then 1 else 0 end) \n            as total_emailclick \n        \n        , sum(case when lower(event_name) = 'emailunsubscribe' then 1 else 0 end) \n            as total_emailunsubscribe \n        \n        , sum(case when lower(event_name) = 'emailcomplaint' then 1 else 0 end) \n            as total_emailcomplaint \n        \n        , sum(case when lower(event_name) = 'customevent' then 1 else 0 end) \n            as total_customevent \n        \n        , sum(case when lower(event_name) = 'emailsubscribe' then 1 else 0 end) \n            as total_emailsubscribe \n        \n        , sum(case when lower(event_name) = 'emailopen' then 1 else 0 end) \n            as total_emailopen \n        \n        , sum(case when lower(event_name) = 'pushsend' then 1 else 0 end) \n            as total_pushsend \n        \n        , sum(case when lower(event_name) = 'smsbounce' then 1 else 0 end) \n            as total_smsbounce \n        \n        , sum(case when lower(event_name) = 'pushbounce' then 1 else 0 end) \n            as total_pushbounce \n        \n        , sum(case when lower(event_name) = 'inappsendskip' then 1 else 0 end) \n            as total_inappsendskip \n        \n        , sum(case when lower(event_name) = 'smssend' then 1 else 0 end) \n            as total_smssend \n        \n        , sum(case when lower(event_name) = 'inappsend' then 1 else 0 end) \n            as total_inappsend \n        \n        , sum(case when lower(event_name) = 'pushopen' then 1 else 0 end) \n            as total_pushopen \n        \n        , sum(case when lower(event_name) = 'emailsend' then 1 else 0 end) \n            as total_emailsend \n        \n        , sum(case when lower(event_name) = 'pushsendskip' then 1 else 0 end) \n            as total_pushsendskip \n        \n        , sum(case when lower(event_name) = 'inappopen' then 1 else 0 end) \n            as total_inappopen \n        \n        , sum(case when lower(event_name) = 'emailsendskip' then 1 else 0 end) \n            as total_emailsendskip \n        \n        , sum(case when lower(event_name) = 'emailbounce' then 1 else 0 end) \n            as total_emailbounce \n        \n        , sum(case when lower(event_name) = 'inappclick' then 1 else 0 end) \n            as total_inappclick \n        \n        , sum(case when lower(event_name) = 'pushuninstall' then 1 else 0 end) \n            as total_pushuninstall \n        \n\n    from events\n\n    \n    group by 1,2,3,4,5,6,7,8,9,10,11\n    \n\n)\n\nselect *\nfrom pivot_out_events", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.940179Z", "completed_at": "2024-07-23T22:12:36.944196Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.946359Z", "completed_at": "2024-07-23T22:12:36.946362Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007005929946899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__events_unique_event_id__created_on.cd499f24d5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_event_id, created_on\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__events`\n    group by unique_event_id, created_on\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.944384Z", "completed_at": "2024-07-23T22:12:36.947067Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.947846Z", "completed_at": "2024-07-23T22:12:36.947849Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006993770599365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__events_event_id.ed1d28a650", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__events`\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.948025Z", "completed_at": "2024-07-23T22:12:36.951636Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:36.954567Z", "completed_at": "2024-07-23T22:12:36.954570Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0076220035552978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__list_user_history", "compiled": true, "compiled_code": "with user_list_unnest as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__list_user_unnest`\n\n), lists as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__list`\n\n), final as (\n    select\n        user_list_unnest.unique_user_key,\n        user_list_unnest._fivetran_user_id,\n        user_list_unnest.user_id,\n        user_list_unnest.email as user_email,\n        user_list_unnest.first_name as user_first_name,\n        user_list_unnest.last_name as user_last_name,\n        user_list_unnest.signup_date as user_signup_date,\n        user_list_unnest.signup_source as user_signup_source,\n        user_list_unnest.updated_at as user_updated_at,\n        user_list_unnest.list_id,\n        user_list_unnest.is_current,\n        lists.list_name,\n        lists.list_type,\n        lists.created_at as list_created_at           \n        \n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (user_list_unnest.phone_digits) as phone_digits\n    \n        , (user_list_unnest.additional_properties) as additional_properties\n    \n\n\n\n\n    from user_list_unnest\n    left join lists\n        on lists.list_id = user_list_unnest.list_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__list_user_history`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.955905Z", "completed_at": "2024-07-23T22:12:37.332150Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.333324Z", "completed_at": "2024-07-23T22:12:37.333343Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3790709972381592, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__user_event_metrics", "compiled": true, "compiled_code": "with user_campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_campaign`\n\n), user_event_metrics as (\n\n    select\n        _fivetran_user_id,\n        unique_user_key,\n        user_id,\n        user_email, \n        count(distinct campaign_id) as count_total_campaigns,\n        min(first_event_at) as first_event_at,\n        max(last_event_at) as last_event_at\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n                            , sum(total_emailclick) as total_emailclick\n            \n        \n            \n                            , sum(total_emailunsubscribe) as total_emailunsubscribe\n            \n        \n            \n                            , sum(total_emailcomplaint) as total_emailcomplaint\n            \n        \n            \n                            , sum(total_customevent) as total_customevent\n            \n        \n            \n                            , sum(total_emailsubscribe) as total_emailsubscribe\n            \n        \n            \n                            , sum(total_emailopen) as total_emailopen\n            \n        \n            \n                            , sum(total_pushsend) as total_pushsend\n            \n        \n            \n                            , sum(total_smsbounce) as total_smsbounce\n            \n        \n            \n                            , sum(total_pushbounce) as total_pushbounce\n            \n        \n            \n                            , sum(total_inappsendskip) as total_inappsendskip\n            \n        \n            \n                            , sum(total_smssend) as total_smssend\n            \n        \n            \n                            , sum(total_inappsend) as total_inappsend\n            \n        \n            \n                            , sum(total_pushopen) as total_pushopen\n            \n        \n            \n                            , sum(total_emailsend) as total_emailsend\n            \n        \n            \n                            , sum(total_pushsendskip) as total_pushsendskip\n            \n        \n            \n                            , sum(total_inappopen) as total_inappopen\n            \n        \n            \n                            , sum(total_emailsendskip) as total_emailsendskip\n            \n        \n            \n                            , sum(total_emailbounce) as total_emailbounce\n            \n        \n            \n                            , sum(total_inappclick) as total_inappclick\n            \n        \n            \n                            , sum(total_pushuninstall) as total_pushuninstall\n            \n        \n\n    from user_campaign\n    group by 1,2,3,4\n\n)\n\nselect *\nfrom user_event_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__user_event_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.337251Z", "completed_at": "2024-07-23T22:12:37.344637Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.345458Z", "completed_at": "2024-07-23T22:12:37.345465Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010123968124389648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_campaign_unique_user_key__campaign_id__experiment_id.efc49a8bf9", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, campaign_id, experiment_id\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_campaign`\n    group by unique_user_key, campaign_id, experiment_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.348161Z", "completed_at": "2024-07-23T22:12:37.353216Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.353874Z", "completed_at": "2024-07-23T22:12:37.353880Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007349967956542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__list_user_history_unique_user_key__list_id__user_updated_at.343b33d606", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, list_id, user_updated_at\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__list_user_history`\n    group by unique_user_key, list_id, user_updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:36.951826Z", "completed_at": "2024-07-23T22:12:37.568539Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.570209Z", "completed_at": "2024-07-23T22:12:37.570229Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6206693649291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.int_iterable__campaign_event_metrics", "compiled": true, "compiled_code": "with user_campaign as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_campaign`\n), campaign_user_event_metrics as (\n    \n    select\n        campaign_id,\n        template_id\n        \n        , count(distinct unique_user_key) as count_unique_users\n        \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n                            , sum(total_emailclick) as total_emailclick\n                            , count(distinct case when total_emailclick > 0 then user_email else null end) as unique_total_emailclick\n            \n        \n            \n                            , sum(total_emailunsubscribe) as total_emailunsubscribe\n                            , count(distinct case when total_emailunsubscribe > 0 then user_email else null end) as unique_total_emailunsubscribe\n            \n        \n            \n                            , sum(total_emailcomplaint) as total_emailcomplaint\n                            , count(distinct case when total_emailcomplaint > 0 then user_email else null end) as unique_total_emailcomplaint\n            \n        \n            \n                            , sum(total_customevent) as total_customevent\n                            , count(distinct case when total_customevent > 0 then user_email else null end) as unique_total_customevent\n            \n        \n            \n                            , sum(total_emailsubscribe) as total_emailsubscribe\n                            , count(distinct case when total_emailsubscribe > 0 then user_email else null end) as unique_total_emailsubscribe\n            \n        \n            \n                            , sum(total_emailopen) as total_emailopen\n                            , count(distinct case when total_emailopen > 0 then user_email else null end) as unique_total_emailopen\n            \n        \n            \n                            , sum(total_pushsend) as total_pushsend\n                            , count(distinct case when total_pushsend > 0 then user_email else null end) as unique_total_pushsend\n            \n        \n            \n                            , sum(total_smsbounce) as total_smsbounce\n                            , count(distinct case when total_smsbounce > 0 then user_email else null end) as unique_total_smsbounce\n            \n        \n            \n                            , sum(total_pushbounce) as total_pushbounce\n                            , count(distinct case when total_pushbounce > 0 then user_email else null end) as unique_total_pushbounce\n            \n        \n            \n                            , sum(total_inappsendskip) as total_inappsendskip\n                            , count(distinct case when total_inappsendskip > 0 then user_email else null end) as unique_total_inappsendskip\n            \n        \n            \n                            , sum(total_smssend) as total_smssend\n                            , count(distinct case when total_smssend > 0 then user_email else null end) as unique_total_smssend\n            \n        \n            \n                            , sum(total_inappsend) as total_inappsend\n                            , count(distinct case when total_inappsend > 0 then user_email else null end) as unique_total_inappsend\n            \n        \n            \n                            , sum(total_pushopen) as total_pushopen\n                            , count(distinct case when total_pushopen > 0 then user_email else null end) as unique_total_pushopen\n            \n        \n            \n                            , sum(total_emailsend) as total_emailsend\n                            , count(distinct case when total_emailsend > 0 then user_email else null end) as unique_total_emailsend\n            \n        \n            \n                            , sum(total_pushsendskip) as total_pushsendskip\n                            , count(distinct case when total_pushsendskip > 0 then user_email else null end) as unique_total_pushsendskip\n            \n        \n            \n                            , sum(total_inappopen) as total_inappopen\n                            , count(distinct case when total_inappopen > 0 then user_email else null end) as unique_total_inappopen\n            \n        \n            \n                            , sum(total_emailsendskip) as total_emailsendskip\n                            , count(distinct case when total_emailsendskip > 0 then user_email else null end) as unique_total_emailsendskip\n            \n        \n            \n                            , sum(total_emailbounce) as total_emailbounce\n                            , count(distinct case when total_emailbounce > 0 then user_email else null end) as unique_total_emailbounce\n            \n        \n            \n                            , sum(total_inappclick) as total_inappclick\n                            , count(distinct case when total_inappclick > 0 then user_email else null end) as unique_total_inappclick\n            \n        \n            \n                            , sum(total_pushuninstall) as total_pushuninstall\n                            , count(distinct case when total_pushuninstall > 0 then user_email else null end) as unique_total_pushuninstall\n            \n        \n        \n    from user_campaign\n    \n    \n    group by 1, 2\n    \n)\n\nselect *\nfrom campaign_user_event_metrics", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__campaign_event_metrics`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.355929Z", "completed_at": "2024-07-23T22:12:37.737034Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.737990Z", "completed_at": "2024-07-23T22:12:37.738012Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3837471008300781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__users", "compiled": true, "compiled_code": "\n\nwith user_event_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__user_event_metrics`\n\n), user_unnested as (\n    -- this has all the user fields we're looking to pass through\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__list_user_unnest`\n\n    -- limit to current lists they are a member of. each list-user combo is a unique row, which we will roll up\n    where is_current\n\n), user_with_list_metrics as (\n\n    select\n        user_id,\n        _fivetran_user_id,\n        unique_user_key,\n        email,\n        first_name,\n        last_name,\n        signup_date,\n        signup_source,\n        updated_at,\n        phone_number,\n        email_list_ids\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (phone_digits) as phone_digits\n    \n        , (additional_properties) as additional_properties\n    \n\n\n\n\n        , count(distinct list_id) as count_lists\n\n    from user_unnested\n    -- roll up to the user\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13\n\n), user_join as (\n\n    select \n        user_with_list_metrics.*,\n        `count_total_campaigns`,\n  `first_event_at`,\n  `last_event_at`,\n  `total_emailclick`,\n  `total_emailunsubscribe`,\n  `total_emailcomplaint`,\n  `total_customevent`,\n  `total_emailsubscribe`,\n  `total_emailopen`,\n  `total_pushsend`,\n  `total_smsbounce`,\n  `total_pushbounce`,\n  `total_inappsendskip`,\n  `total_smssend`,\n  `total_inappsend`,\n  `total_pushopen`,\n  `total_emailsend`,\n  `total_pushsendskip`,\n  `total_inappopen`,\n  `total_emailsendskip`,\n  `total_emailbounce`,\n  `total_inappclick`,\n  `total_pushuninstall`\n\n    from user_with_list_metrics\n    left join user_event_metrics\n        on user_with_list_metrics.unique_user_key = user_event_metrics.unique_user_key\n)\n\nselect *\nfrom user_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__users`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.741665Z", "completed_at": "2024-07-23T22:12:37.746551Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.747330Z", "completed_at": "2024-07-23T22:12:37.747341Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007522106170654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__users_unique_user_key.4ca37a26c8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__users`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.749729Z", "completed_at": "2024-07-23T22:12:37.754326Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.755164Z", "completed_at": "2024-07-23T22:12:37.755169Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006841182708740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.unique_iterable__users_unique_user_key.a57f431f59", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_user_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__users`\n  where unique_user_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.890874Z", "completed_at": "2024-07-23T22:12:37.922420Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.924908Z", "completed_at": "2024-07-23T22:12:37.924922Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.0394692420959473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_message_type_history`\n-- had to rename this to be compatible with postgres....", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.575561Z", "completed_at": "2024-07-23T22:12:37.936853Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.938289Z", "completed_at": "2024-07-23T22:12:37.938298Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36518192291259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__campaigns", "compiled": true, "compiled_code": "with campaign_event_metrics as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__campaign_event_metrics`\n\n), campaign_list_metrics as (\n\n    select\n        campaign_id,\n        sum(case when list_activity = 'send' then 1 else 0 end) as count_send_lists,\n        sum(case when list_activity = 'suppress' then 1 else 0 end) as count_suppress_lists\n    \n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__campaign_lists`\n    group by campaign_id\n\n), campaign as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__recurring_campaigns`\n    \n\n\n), template as (\n    -- rebringing this in (it is brought in iterable__events) in case any campaigns don't have events yet\n    -- this will result in some DAG ugliness but maintains template info for non-sent campaigns\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__latest_template`\n\n), campaign_join as (\n\n     -- these are both in campaigns\n\n    -- this query will be at the campaign and experiment(if available) variation grain\n    select\n        campaign.*,\n        `count_unique_users`,\n  `total_emailclick`,\n  `unique_total_emailclick`,\n  `total_emailunsubscribe`,\n  `unique_total_emailunsubscribe`,\n  `total_emailcomplaint`,\n  `unique_total_emailcomplaint`,\n  `total_customevent`,\n  `unique_total_customevent`,\n  `total_emailsubscribe`,\n  `unique_total_emailsubscribe`,\n  `total_emailopen`,\n  `unique_total_emailopen`,\n  `total_pushsend`,\n  `unique_total_pushsend`,\n  `total_smsbounce`,\n  `unique_total_smsbounce`,\n  `total_pushbounce`,\n  `unique_total_pushbounce`,\n  `total_inappsendskip`,\n  `unique_total_inappsendskip`,\n  `total_smssend`,\n  `unique_total_smssend`,\n  `total_inappsend`,\n  `unique_total_inappsend`,\n  `total_pushopen`,\n  `unique_total_pushopen`,\n  `total_emailsend`,\n  `unique_total_emailsend`,\n  `total_pushsendskip`,\n  `unique_total_pushsendskip`,\n  `total_inappopen`,\n  `unique_total_inappopen`,\n  `total_emailsendskip`,\n  `unique_total_emailsendskip`,\n  `total_emailbounce`,\n  `unique_total_emailbounce`,\n  `total_inappclick`,\n  `unique_total_inappclick`,\n  `total_pushuninstall`,\n  `unique_total_pushuninstall`\n        , \n        campaign_list_metrics.count_send_lists,\n        campaign_list_metrics.count_suppress_lists,\n        \n        template.template_name,\n        template.creator_user_id as template_creator_user_id,\n        template.message_medium,\n        template.message_type_name,\n        template.channel_name,\n        template.channel_id,\n        template.channel_type\n\n    from campaign\n    left join campaign_event_metrics \n        on campaign.campaign_id = campaign_event_metrics.campaign_id\n        and campaign.template_id = campaign_event_metrics.template_id\n    left join campaign_list_metrics \n        on campaign.campaign_id = campaign_list_metrics.campaign_id\n\n    \n    \n    left join template\n        on campaign.template_id = template.template_id\n)\n\nselect *\nfrom campaign_join", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__campaigns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.942225Z", "completed_at": "2024-07-23T22:12:37.949208Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.950312Z", "completed_at": "2024-07-23T22:12:37.950317Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010556936264038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__campaigns_campaign_id__experiment_id__template_id.49ae15e83c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        campaign_id, experiment_id, template_id\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__campaigns`\n    group by campaign_id, experiment_id, template_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.945923Z", "completed_at": "2024-07-23T22:12:37.949508Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:37.950613Z", "completed_at": "2024-07-23T22:12:37.950617Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010581016540527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__campaigns_campaign_id.03c9448919", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect campaign_id\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__campaigns`\nwhere campaign_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:34.894814Z", "completed_at": "2024-07-23T22:12:38.039377Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:38.039797Z", "completed_at": "2024-07-23T22:12:38.039802Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.153165102005005, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel_tmp", "compiled": true, "compiled_code": "select *\nfrom `dbt-package-testing`.`iterable`.`user_unsubscribed_channel_history`", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:37.931083Z", "completed_at": "2024-07-23T22:12:41.200928Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.202744Z", "completed_at": "2024-07-23T22:12:41.202765Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.274722099304199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsub_message_type", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    message_type_id\n    \n as \n    \n    message_type_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select \n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(message_type_id as string ) as message_type_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(message_type_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_message_type_unique_key,\n        \n        \n        rank() over(partition by email, message_type_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.214346Z", "completed_at": "2024-07-23T22:12:41.224257Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.225868Z", "completed_at": "2024-07-23T22:12:41.225876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019575119018554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsub_message_type_message_type_id.268a89ea6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect message_type_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`\nwhere message_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.219705Z", "completed_at": "2024-07-23T22:12:41.224687Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.226226Z", "completed_at": "2024-07-23T22:12:41.226231Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019285917282104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsub_message_type_unsub_message_type_unique_key.2e13291de3", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_message_type_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`\n  where unsub_message_type_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:38.041279Z", "completed_at": "2024-07-23T22:12:41.415576Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.416748Z", "completed_at": "2024-07-23T22:12:41.416761Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.377297878265381, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable_source.stg_iterable__user_unsubscribed_channel", "compiled": true, "compiled_code": "with base as (\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_iterable_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_iterable_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as string) as \n    \n    _fivetran_id\n    \n , \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n\n    select\n\n        cast(_fivetran_id as string ) as _fivetran_user_id,\n        coalesce(cast(_fivetran_id as string ), email) as unique_user_key,\n        cast(channel_id as string ) as channel_id,\n        to_hex(md5(cast(coalesce(cast(_fivetran_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(channel_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as string), '_dbt_utils_surrogate_key_null_') as string))) as unsub_channel_unique_key,\n        \n        \n        rank() over(partition by email, channel_id order by updated_at desc) as latest_batch_index,\n        \n\n        updated_at,\n        _fivetran_synced\n\n    from fields\n)\n\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.425675Z", "completed_at": "2024-07-23T22:12:41.439027Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.440597Z", "completed_at": "2024-07-23T22:12:41.440603Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020119905471801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.not_null_stg_iterable__user_unsubscribed_channel_channel_id.da0ed9e9be", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect channel_id\nfrom `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`\nwhere channel_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.431952Z", "completed_at": "2024-07-23T22:12:41.439377Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.440823Z", "completed_at": "2024-07-23T22:12:41.440827Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01943802833557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable_source.unique_stg_iterable__user_unsubscribed_channel_unsub_channel_unique_key.48ad1606c9", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unsub_channel_unique_key as unique_field\n  from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`\n  where unsub_channel_unique_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.435170Z", "completed_at": "2024-07-23T22:12:41.439730Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.441039Z", "completed_at": "2024-07-23T22:12:41.441042Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018802881240844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.iterable.iterable__user_unsubscriptions", "compiled": true, "compiled_code": "with message_type_channel as (\n\n    select *\n    from `dbt-package-testing`.`zz_dbt_renee_int_iterable`.`int_iterable__message_type_channel`\n\n), user_unsubscribed_channel as (\n\n    select\n        *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsubscribed_channel`\n    where latest_batch_index = 1\n\n\n), user_unsubscribed_message_type as (\n\n    select\n        *\n    from `dbt-package-testing`.`zz_dbt_renee_stg_iterable`.`stg_iterable__user_unsub_message_type`\n    where latest_batch_index = 1\n\n\n\n), combine as (\n\n    select \n        _fivetran_user_id,\n        unique_user_key,\n        channel_id,\n        cast(null as string) as message_type_id,\n        updated_at\n    from user_unsubscribed_channel\n\n\n\n    union all\n\n    select \n        _fivetran_user_id,\n        unique_user_key,\n        cast(null as string) as channel_id,\n        message_type_id,\n        updated_at\n    from user_unsubscribed_message_type\n\n\n), final as (\n\n    select \n        combine._fivetran_user_id,\n        combine.unique_user_key,\n        -- coalescing since message_type -> channel goes up a grain\n        coalesce(combine.channel_id, message_type_channel.channel_id) as channel_id,\n        coalesce(combine.message_type_id, message_type_channel.message_type_id) as message_type_id,\n        combine.updated_at,\n        message_type_channel.channel_name,\n        message_type_channel.message_type_name,\n        message_type_channel.channel_type,\n        message_type_channel.message_medium,\n        case when combine.channel_id is not null then true else false end as is_unsubscribed_channel_wide\n\n    from combine\n\n    -- unsubscribing from an entire channel unsubscribes a user from all message types in that channel\n    join message_type_channel \n        on combine.channel_id = message_type_channel.channel_id\n        or combine.message_type_id = message_type_channel.message_type_id\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_unsubscriptions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.447960Z", "completed_at": "2024-07-23T22:12:41.450267Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.451090Z", "completed_at": "2024-07-23T22:12:41.451094Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008005857467651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.not_null_iterable__user_unsubscriptions_unique_user_key.f8db72932b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unique_user_key\nfrom `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_unsubscriptions`\nwhere unique_user_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-23T22:12:41.444542Z", "completed_at": "2024-07-23T22:12:41.450485Z"}, {"name": "execute", "started_at": "2024-07-23T22:12:41.451299Z", "completed_at": "2024-07-23T22:12:41.451303Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008765935897827148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.iterable.dbt_utils_unique_combination_of_columns_iterable__user_unsubscriptions_unique_user_key__message_type_id__channel_id__is_unsubscribed_channel_wide.54aad019b5", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        unique_user_key, message_type_id, channel_id, is_unsubscribed_channel_wide\n    from `dbt-package-testing`.`zz_dbt_renee_iterable`.`iterable__user_unsubscriptions`\n    group by unique_user_key, message_type_id, channel_id, is_unsubscribed_channel_wide\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 8.008430242538452, "args": {"log_format_file": "debug", "select": [], "quiet": false, "defer": false, "static_parser": true, "favor_state": false, "introspect": true, "invocation_command": "dbt docs generate", "log_file_max_bytes": 10485760, "project_dir": "/Users/renee/Documents/dbt/iterable/develop", "print": true, "send_anonymous_usage_stats": true, "show_resource_report": false, "version_check": true, "log_level_file": "debug", "strict_mode": false, "partial_parse_file_diff": true, "empty_catalog": false, "log_level": "info", "indirect_selection": "eager", "use_colors_file": true, "partial_parse": true, "enable_legacy_logger": false, "populate_cache": true, "cache_selected_only": false, "compile": true, "use_colors": true, "static": false, "write_json": true, "exclude": [], "vars": {}, "which": "generate", "log_path": "/Users/renee/Documents/dbt/iterable/develop/logs", "warn_error_options": {"include": [], "exclude": []}, "printer_width": 80, "profiles_dir": "/Users/renee/.dbt", "macro_debugging": false, "log_format": "default"}}